{"version":3,"file":"static/chunks/5878.1a20dc6329aac81d.js","mappings":"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","sources":["webpack://_N_E/./src/components/dashboard/PendingTxs/PendingRecoveryListItem.tsx","webpack://_N_E/./src/features/recovery/components/RecoveryInfo/index.tsx","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/features/recovery/components/RecoveryStatus/index.tsx","webpack://_N_E/./src/features/recovery/components/RecoveryType/index.tsx","webpack://_N_E/./src/hooks/useClock.ts","webpack://_N_E/./src/features/recovery/hooks/useRecoveryTxState.ts","webpack://_N_E/./src/features/recovery/services/recoveryEvents.ts"],"sourcesContent":["import Link from 'next/link'\nimport { useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport { ChevronRight } from '@mui/icons-material'\nimport { Box } from '@mui/material'\nimport type { ReactElement } from 'react'\n\nimport { RecoveryInfo } from '@/features/recovery/components/RecoveryInfo'\nimport { RecoveryStatus } from '@/features/recovery/components/RecoveryStatus'\nimport { RecoveryType } from '@/features/recovery/components/RecoveryType'\nimport { AppRoutes } from '@/config/routes'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nimport css from './styles.module.css'\n\nfunction PendingRecoveryListItem({ transaction }: { transaction: RecoveryQueueItem }): ReactElement {\n  const router = useRouter()\n  const { isMalicious } = transaction\n\n  const url = useMemo(\n    () => ({\n      pathname: AppRoutes.transactions.queue,\n      query: router.query,\n    }),\n    [router.query],\n  )\n\n  return (\n    <Link href={url} passHref>\n      <Box className={css.container} sx={{ minHeight: 50 }}>\n        <Box flex={1}>\n          <RecoveryType isMalicious={isMalicious} />\n        </Box>\n\n        <RecoveryInfo isMalicious={isMalicious} />\n\n        <RecoveryStatus recovery={transaction} />\n\n        <ChevronRight color=\"border\" />\n      </Box>\n    </Link>\n  )\n}\n\nexport default PendingRecoveryListItem\n","import { SvgIcon, Tooltip } from '@mui/material'\nimport type { ReactElement } from 'react'\n\nimport WarningIcon from '@/public/images/notifications/warning.svg'\n\nexport const RecoveryInfo = ({ isMalicious }: { isMalicious: boolean }): ReactElement | null => {\n  if (!isMalicious) {\n    return null\n  }\n\n  return (\n    <Tooltip title=\"Suspicious activity\" placement=\"top\" arrow>\n      <span>\n        <SvgIcon component={WarningIcon} inheritViewBox color=\"error\" />\n      </span>\n    </Tooltip>\n  )\n}\n","export * from \"/Users/liuxiaolin/Documents/other/safe-wallet-monorepo/apps/web/src/components/common/Mui/index.tsx\"","import { CircularProgress, SvgIcon } from '@mui/material'\nimport type { ReactElement } from 'react'\n\nimport ClockIcon from '@/public/images/common/clock.svg'\nimport { useRecoveryTxState } from '@/features/recovery/hooks/useRecoveryTxState'\nimport { RecoveryEvent } from '@/features/recovery/services/recoveryEvents'\nimport store from '../RecoveryContext'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\nimport TxStatusChip from '@/components/transactions/TxStatusChip'\n\nconst STATUS_LABELS: Partial<Record<RecoveryEvent, string>> = {\n  [RecoveryEvent.PROCESSING]: 'Processing',\n  [RecoveryEvent.PROCESSED]: 'Loading',\n}\n\nexport const RecoveryStatus = ({ recovery }: { recovery: RecoveryQueueItem }): ReactElement => {\n  const { isExecutable, isExpired } = useRecoveryTxState(recovery)\n  const pending = store.useStore()?.pending\n\n  const pendingTxStatus = pending?.[recovery.args.txHash]?.status\n\n  const status = pendingTxStatus ? (\n    <>\n      <CircularProgress size={14} color=\"inherit\" />\n      {STATUS_LABELS[pendingTxStatus]}\n    </>\n  ) : isExecutable ? (\n    'Awaiting execution'\n  ) : isExpired ? (\n    'Expired'\n  ) : (\n    <>\n      <SvgIcon component={ClockIcon} inheritViewBox fontSize=\"inherit\" />\n      Pending\n    </>\n  )\n\n  return <TxStatusChip color={isExpired ? 'error' : 'warning'}>{status}</TxStatusChip>\n}\n","import { Box, SvgIcon, Typography } from '@mui/material'\nimport type { ReactElement } from 'react'\n\nimport RecoveryPlusIcon from '@/public/images/common/recovery-plus.svg'\n\nimport txTypeCss from '@/components/transactions/TxType/styles.module.css'\n\nexport function RecoveryType({ isMalicious }: { isMalicious: boolean }): ReactElement {\n  return (\n    <Box className={txTypeCss.txType}>\n      <SvgIcon\n        component={RecoveryPlusIcon}\n        inheritViewBox\n        fontSize=\"inherit\"\n        sx={{ '& path': { fill: ({ palette }) => palette.warning.main } }}\n      />\n      <Typography color={isMalicious ? 'error.main' : undefined}>\n        {isMalicious ? 'Malicious transaction' : 'Account recovery'}\n      </Typography>\n    </Box>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nexport function useClock(interval = 1_000): number {\n  const [timestamp, setTimestamp] = useState(Date.now())\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      setTimestamp((prev) => prev + interval)\n    }, interval)\n\n    return () => {\n      clearInterval(timeout)\n    }\n  }, [interval])\n\n  return timestamp\n}\n","import { useClock } from '../../../hooks/useClock'\nimport { selectDelayModifierByTxHash } from '@/features/recovery/services/selectors'\nimport recoveryStore from '@/features/recovery/components/RecoveryContext'\nimport { sameAddress } from '@/utils/addresses'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function useRecoveryTxState({ validFrom, expiresAt, transactionHash, args, address }: RecoveryQueueItem): {\n  isNext: boolean\n  isExecutable: boolean\n  isExpired: boolean\n  isPending: boolean\n  remainingSeconds: number\n} {\n  const { state, pending } = recoveryStore.useStore() || {}\n  const recovery = state?.[0]\n  const delayModifier = recovery && selectDelayModifierByTxHash(recovery, transactionHash)\n\n  // We don't display seconds in the interface, so we can use a 60s interval\n  const timestamp = useClock(60_000)\n  const remainingMs = Number(validFrom) - timestamp\n\n  const isValid = remainingMs <= 0\n  const isExpired = expiresAt !== null ? Number(expiresAt) <= Date.now() : false\n\n  // Check module address in case multiple Delay Modifiers enabled\n  const isNext =\n    !delayModifier ||\n    (sameAddress(delayModifier.address, address) && BigInt(args.queueNonce) === BigInt(delayModifier.txNonce))\n  const isExecutable = isNext && isValid && !isExpired\n  const isPending = !!pending?.[args.txHash]\n\n  const remainingSeconds = isValid ? 0 : Math.ceil(remainingMs / 1_000)\n\n  return { isNext, isExecutable, isExpired, remainingSeconds, isPending }\n}\n","import EventBus from '../../../services/EventBus'\n\nexport enum RecoveryEvent {\n  PROCESSING_BY_SMART_CONTRACT_WALLET = 'PROCESSING_BY_SMART_CONTRACT_WALLET',\n  PROCESSING = 'PROCESSING', // Submitted to the blockchain\n  PROCESSED = 'PROCESSED', // Executed on the blockchain\n  SUCCESS = 'SUCCESS', // Loaded from the blockchain\n  FAILED = 'FAILED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum RecoveryTxType {\n  PROPOSAL = 'PROPOSAL',\n  EXECUTION = 'EXECUTION',\n  SKIP_EXPIRED = 'SKIP_EXPIRED',\n}\n\nexport interface RecoveryEvents {\n  [RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.PROCESSING]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.REVERTED]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    error: Error\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.PROCESSED]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.FAILED]: {\n    moduleAddress: string\n    txHash?: string\n    recoveryTxHash?: string\n    error: Error\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.SUCCESS]: {\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n}\n\nconst recoveryEventBus = new EventBus<RecoveryEvents>()\n\nexport const recoveryDispatch = recoveryEventBus.dispatch.bind(recoveryEventBus)\n\nexport const recoverySubscribe = recoveryEventBus.subscribe.bind(recoveryEventBus)\n\n// Log all events\nObject.values(RecoveryEvent).forEach((event: RecoveryEvent) => {\n  recoverySubscribe<RecoveryEvent>(event, (detail) => {\n    console.info(`Recovery ${event} event received`, detail)\n  })\n})\n"],"names":["transaction","router","useRouter","PendingRecoveryListItem","isMalicious","url","useMemo","pathname","AppRoutes","transactions","queue","query","Link","href","passHref","Box","className","css","sx","minHeight","flex","RecoveryType","RecoveryInfo","RecoveryStatus","recovery","ChevronRight","color","Tooltip","title","placement","arrow","span","SvgIcon","component","WarningIcon","inheritViewBox","STATUS_LABELS","RecoveryEvent","PROCESSING","PROCESSED","store","pending","isExecutable","isExpired","useRecoveryTxState","useStore","pendingTxStatus","args","txHash","status","CircularProgress","size","ClockIcon","fontSize","TxStatusChip","txTypeCss","RecoveryPlusIcon","fill","palette","warning","main","Typography","undefined","validFrom","expiresAt","transactionHash","address","state","recoveryStore","delayModifier","selectDelayModifierByTxHash","timestamp","useClock","interval","setTimestamp","useState","Date","now","useEffect","timeout","setInterval","prev","clearInterval","remainingMs","Number","isValid","isNext","sameAddress","BigInt","queueNonce","txNonce","isPending","remainingSeconds","Math","ceil","RecoveryTxType","recoveryEventBus","EventBus","recoveryDispatch","dispatch","bind","recoverySubscribe","subscribe","Object","values","forEach","event","console","info","detail"],"sourceRoot":"","ignoreList":[]}