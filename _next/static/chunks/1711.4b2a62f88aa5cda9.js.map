{"version":3,"file":"static/chunks/1711.4b2a62f88aa5cda9.js","mappings":"uPA+CA,MA5B0B,OAAC,WAAEA,CAAS,CAA0B,GACxDC,EAASC,CAAAA,EAAAA,CA2BFC,CA3BED,EAAAA,CAASA,GAClB,MAAEE,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GACtBC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GACpB,WAAEC,CAAS,gBAAEC,CAAc,UAAEC,CAAQ,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,EAAAA,CAAaA,EAElEC,EAAOb,EAAUc,EAAE,CACnBC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAuBA,CAAChB,EAAUiB,aAAa,EAAIjB,EAAUiB,aAAa,CAACC,KAAK,CAAGC,OAC7FC,EAAaC,CAAAA,EAAAA,EAAAA,EAAAA,CAAYA,CAACrB,EAAWC,OAAAA,EAAAA,KAAAA,EAAAA,EAAQqB,OAAO,CAAfrB,EAAmB,GAAIG,GAC5DmB,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAYA,CAACxB,EAAWC,OAAAA,EAAAA,KAAAA,EAAAA,EAAQqB,OAAAA,CAARrB,EAAmB,UAE3DwB,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACRV,YAAyBL,EAASK,EACpC,EAAG,CAACL,EAAUK,EAAQ,EAEtBU,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACRC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACpB,EAASO,GAAMc,IAAI,CAACnB,GAAWoB,KAAK,CAACnB,EACxD,EAAG,CAACI,EAAMP,EAASE,EAAWC,EAAe,EAK3C,UAACoB,EAAAA,CAAiBA,CAAAA,CAAChB,KAAMA,EAAMQ,aAAcD,EAAYU,YAAa,CAACP,EAASQ,cAAc,aAC5F,UAACC,EAAAA,GAAUA,CAAAA,CAACC,GAAI,WAJPV,CAIWW,CAJAd,EArBA,WAqBae,oBAAoBC,YAAaC,KAvBtD,yBACG,kDA6BrB,4BCrBA,MAjBsB,OAAC,IAiBRC,OAjBUtC,CAAS,CAAqC,GAC/D,CAgBoBsC,EAAA,GAhBlBJ,CAAI,CAAE,CAAGK,CAAAA,EAAAA,EAAAA,CAAAA,CAAkBA,CAACvC,GAC9BwC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACzC,EAAU0C,MAAM,EAEtD,MACE,UAACC,EAAAA,CAAQA,CAAAA,CACPC,MAAM,sBACNC,SAAU,iCAAGX,EAAK,UAClBY,KAAMN,GAAeO,EAAAA,CAAQA,CAC7BC,KAAM,EACNhD,UAAWA,WAEX,UAACG,EAAiBA,CAACH,UAAWA,KAGpC","sources":["webpack://_N_E/./src/components/tx-flow/flows/ConfirmTx/ConfirmProposedTx.tsx","webpack://_N_E/./src/components/tx-flow/flows/ConfirmTx/index.tsx"],"sourcesContent":["import { type ReactElement, useContext, useEffect } from 'react'\nimport { Typography } from '@mui/material'\nimport type { TransactionSummary } from '@safe-global/safe-gateway-typescript-sdk'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { useChainId } from '@/hooks/useChainId'\nimport { useSigner } from '@/hooks/wallets/useWallet'\nimport { isExecutable, isMultisigExecutionInfo, isSignableBy } from '@/utils/transaction-guards'\nimport { createExistingTx } from '@/services/tx/tx-sender'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport SignOrExecuteForm from '@/components/tx/SignOrExecuteForm'\n\ntype ConfirmProposedTxProps = {\n  txSummary: TransactionSummary\n}\n\nconst SIGN_TEXT = 'Sign this transaction.'\nconst EXECUTE_TEXT = 'Submit the form to execute this transaction.'\nconst SIGN_EXECUTE_TEXT = 'Sign or immediately execute this transaction.'\n\nconst ConfirmProposedTx = ({ txSummary }: ConfirmProposedTxProps): ReactElement => {\n  const signer = useSigner()\n  const { safe } = useSafeInfo()\n  const chainId = useChainId()\n  const { setSafeTx, setSafeTxError, setNonce } = useContext(SafeTxContext)\n\n  const txId = txSummary.id\n  const txNonce = isMultisigExecutionInfo(txSummary.executionInfo) ? txSummary.executionInfo.nonce : undefined\n  const canExecute = isExecutable(txSummary, signer?.address || '', safe)\n  const canSign = isSignableBy(txSummary, signer?.address || '')\n\n  useEffect(() => {\n    txNonce !== undefined && setNonce(txNonce)\n  }, [setNonce, txNonce])\n\n  useEffect(() => {\n    createExistingTx(chainId, txId).then(setSafeTx).catch(setSafeTxError)\n  }, [txId, chainId, setSafeTx, setSafeTxError])\n\n  const text = canSign ? (canExecute ? SIGN_EXECUTE_TEXT : SIGN_TEXT) : EXECUTE_TEXT\n\n  return (\n    <SignOrExecuteForm txId={txId} isExecutable={canExecute} onlyExecute={!canSign} showMethodCall>\n      <Typography mb={1}>{text}</Typography>\n    </SignOrExecuteForm>\n  )\n}\n\nexport default ConfirmProposedTx\n","import { isSwapOrderTxInfo } from '@/utils/transaction-guards'\nimport type { TransactionSummary } from '@safe-global/safe-gateway-typescript-sdk'\nimport TxLayout from '@/components/tx-flow/common/TxLayout'\nimport ConfirmProposedTx from './ConfirmProposedTx'\nimport { useTransactionType } from '@/hooks/useTransactionType'\nimport SwapIcon from '@/public/images/common/swap.svg'\n\nconst ConfirmTxFlow = ({ txSummary }: { txSummary: TransactionSummary }) => {\n  const { text } = useTransactionType(txSummary)\n  const isSwapOrder = isSwapOrderTxInfo(txSummary.txInfo)\n\n  return (\n    <TxLayout\n      title=\"Confirm transaction\"\n      subtitle={<>{text}&nbsp;</>}\n      icon={isSwapOrder && SwapIcon}\n      step={0}\n      txSummary={txSummary}\n    >\n      <ConfirmProposedTx txSummary={txSummary} />\n    </TxLayout>\n  )\n}\n\nexport default ConfirmTxFlow\n"],"names":["txSummary","signer","useSigner","ConfirmProposedTx","safe","useSafeInfo","chainId","useChainId","setSafeTx","setSafeTxError","setNonce","useContext","SafeTxContext","txId","id","txNonce","isMultisigExecutionInfo","executionInfo","nonce","undefined","canExecute","isExecutable","address","canSign","isSignableBy","useEffect","createExistingTx","then","catch","SignOrExecuteForm","onlyExecute","showMethodCall","Typography","mb","text","SIGN_EXECUTE_TEXT","SIGN_TEXT","EXECUTE_TEXT","ConfirmTxFlow","useTransactionType","isSwapOrder","isSwapOrderTxInfo","txInfo","TxLayout","title","subtitle","icon","SwapIcon","step"],"sourceRoot":"","ignoreList":[]}