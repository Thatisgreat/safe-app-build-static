{"version":3,"file":"static/chunks/6780-c56502af24f4ac40.js","mappings":"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","sources":["webpack://_N_E/./src/services/safe-apps/AppCommunicator.ts","webpack://_N_E/./src/components/safe-apps/AppFrame/useAppCommunicator.ts","webpack://_N_E/./src/components/safe-apps/AppFrame/useGetSafeInfo.ts","webpack://_N_E/./src/components/safe-apps/utils.ts","webpack://_N_E/./src/hooks/safe-apps/useCustomAppCommunicator.tsx"],"sourcesContent":["import type { RefObject } from 'react'\nimport type { SDKMessageEvent, MethodToResponse, ErrorResponse, RequestId } from '@safe-global/safe-apps-sdk'\nimport { getSDKVersion, Methods, MessageFormatter } from '@safe-global/safe-apps-sdk'\nimport { asError } from '../exceptions/utils'\n\ntype MessageHandler = (\n  msg: SDKMessageEvent,\n) => void | MethodToResponse[Methods] | ErrorResponse | Promise<MethodToResponse[Methods] | ErrorResponse | void>\n\ntype AppCommunicatorConfig = {\n  onMessage?: (msg: SDKMessageEvent) => void\n  onError?: (error: Error, data: any) => void\n}\n\nclass AppCommunicator {\n  private iframeRef: RefObject<HTMLIFrameElement | null>\n  private handlers = new Map<Methods, MessageHandler>()\n  private config: AppCommunicatorConfig\n\n  constructor(iframeRef: RefObject<HTMLIFrameElement | null>, config?: AppCommunicatorConfig) {\n    this.iframeRef = iframeRef\n    this.config = config || {}\n\n    window.addEventListener('message', this.handleIncomingMessage)\n  }\n\n  on = (method: Methods, handler: MessageHandler): void => {\n    this.handlers.set(method, handler)\n  }\n\n  private isValidMessage = (msg: SDKMessageEvent): boolean => {\n    if (!msg.data) return false\n    if (msg.data.hasOwnProperty('isCookieEnabled')) {\n      return true\n    }\n\n    const sentFromIframe = this.iframeRef.current?.contentWindow === msg.source\n    const knownMethod = Object.values(Methods).includes(msg.data.method)\n\n    // TODO: move it to safe-app Methods types\n    const isThemeInfoMethod = (msg.data.method as string) === 'getCurrentTheme'\n\n    return sentFromIframe && (knownMethod || isThemeInfoMethod)\n  }\n\n  private canHandleMessage = (msg: SDKMessageEvent): boolean => {\n    if (!msg.data) return false\n\n    return Boolean(this.handlers.get(msg.data.method))\n  }\n\n  send = (data: unknown, requestId: RequestId, error = false): void => {\n    const sdkVersion = getSDKVersion()\n    const msg = error\n      ? MessageFormatter.makeErrorResponse(requestId, data as string, sdkVersion)\n      : MessageFormatter.makeResponse(requestId, data, sdkVersion)\n\n    this.iframeRef.current?.contentWindow?.postMessage(msg, '*')\n  }\n\n  handleIncomingMessage = async (msg: SDKMessageEvent): Promise<void> => {\n    const validMessage = this.isValidMessage(msg)\n    const hasHandler = this.canHandleMessage(msg)\n\n    if (validMessage && hasHandler) {\n      const handler = this.handlers.get(msg.data.method)\n\n      this.config?.onMessage?.(msg)\n\n      try {\n        // @ts-expect-error Handler existence is checked in this.canHandleMessage\n        const response = await handler(msg)\n\n        // If response is not returned, it means the response will be send somewhere else\n        if (typeof response !== 'undefined') {\n          this.send(response, msg.data.id)\n        }\n      } catch (e) {\n        const error = asError(e)\n\n        this.send(error.message, msg.data.id, true)\n        this.config?.onError?.(error, msg.data)\n      }\n    }\n  }\n\n  clear = (): void => {\n    window.removeEventListener('message', this.handleIncomingMessage)\n    this.handlers.clear()\n  }\n}\n\nexport default AppCommunicator\n","import type { MutableRefObject } from 'react'\nimport { useEffect, useMemo, useState } from 'react'\nimport { getAddress } from 'ethers'\nimport type {\n  SafeAppData,\n  ChainInfo as WebCoreChainInfo,\n  TransactionDetails,\n} from '@safe-global/safe-gateway-typescript-sdk'\nimport type {\n  AddressBookItem,\n  BaseTransaction,\n  EIP712TypedData,\n  EnvironmentInfo,\n  GetBalanceParams,\n  GetTxBySafeTxHashParams,\n  RequestId,\n  RPCPayload,\n  SendTransactionRequestParams,\n  SendTransactionsParams,\n  SignMessageParams,\n  SignTypedMessageParams,\n  ChainInfo,\n  SafeInfoExtended,\n} from '@safe-global/safe-apps-sdk'\nimport { Methods, RPC_CALLS } from '@safe-global/safe-apps-sdk'\nimport type { Permission, PermissionRequest } from '@safe-global/safe-apps-sdk/dist/types/types/permissions'\nimport type { SafeSettings } from '@safe-global/safe-apps-sdk'\nimport AppCommunicator from '@/services/safe-apps/AppCommunicator'\nimport { Errors, logError } from '@/services/exceptions'\nimport type { SafePermissionsRequest } from '@/hooks/safe-apps/permissions'\nimport { SAFE_APPS_EVENTS, trackSafeAppEvent } from '@/services/analytics'\nimport { useAppSelector } from '@/store'\nimport { selectRpc } from '@/store/settingsSlice'\nimport { createSafeAppsWeb3Provider } from '@/hooks/wallets/web3'\nimport { useDarkMode } from '@/hooks/useDarkMode'\nimport type { Balances } from '@safe-global/store/gateway/AUTO_GENERATED/balances'\n\nexport enum CommunicatorMessages {\n  REJECT_TRANSACTION_MESSAGE = 'Transaction was rejected',\n}\n\ntype JsonRpcResponse = {\n  jsonrpc: string\n  id: number\n  result?: any\n  error?: string\n}\n\nexport type UseAppCommunicatorHandlers = {\n  onConfirmTransactions: (txs: BaseTransaction[], requestId: RequestId, params?: SendTransactionRequestParams) => void\n  onSignMessage: (\n    message: string | EIP712TypedData,\n    requestId: string,\n    method: Methods.signMessage | Methods.signTypedMessage,\n    sdkVersion: string,\n  ) => void\n  onGetTxBySafeTxHash: (transactionId: string) => Promise<TransactionDetails>\n  onGetEnvironmentInfo: () => EnvironmentInfo\n  onGetSafeBalances: (currency: string) => Promise<Balances>\n  onGetSafeInfo: () => SafeInfoExtended\n  onGetChainInfo: () => ChainInfo | undefined\n  onGetPermissions: (origin: string) => Permission[]\n  onSetPermissions: (permissionsRequest?: SafePermissionsRequest) => void\n  onRequestAddressBook: (origin: string) => AddressBookItem[]\n  onSetSafeSettings: (settings: SafeSettings) => SafeSettings\n  onGetOffChainSignature: (messageHash: string) => Promise<string | undefined>\n}\n\nconst useAppCommunicator = (\n  iframeRef: MutableRefObject<HTMLIFrameElement | null>,\n  app: SafeAppData | undefined,\n  chain: WebCoreChainInfo | undefined,\n  handlers: UseAppCommunicatorHandlers,\n): AppCommunicator | undefined => {\n  const [communicator, setCommunicator] = useState<AppCommunicator | undefined>(undefined)\n  const customRpc = useAppSelector(selectRpc)\n  const isDarkMode = useDarkMode()\n\n  const safeAppWeb3Provider = useMemo(() => {\n    if (!chain) {\n      return\n    }\n\n    return createSafeAppsWeb3Provider(chain, customRpc?.[chain.chainId])\n  }, [chain, customRpc])\n\n  useEffect(() => {\n    let communicatorInstance: AppCommunicator\n\n    const initCommunicator = (iframeRef: MutableRefObject<HTMLIFrameElement | null>, app?: SafeAppData) => {\n      communicatorInstance = new AppCommunicator(iframeRef, {\n        onMessage: (msg) => {\n          if (!msg.data) return\n\n          const isCustomApp = app && app.id < 1\n\n          trackSafeAppEvent(\n            { ...SAFE_APPS_EVENTS.SAFE_APP_SDK_METHOD_CALL },\n            isCustomApp ? app?.url : app?.name || '',\n            {\n              method: msg.data.method,\n              ethMethod: (msg.data.params as any)?.call,\n              version: msg.data.env.sdkVersion,\n            },\n          )\n        },\n        onError: (error) => {\n          logError(Errors._901, error.message)\n        },\n      })\n\n      setCommunicator(communicatorInstance)\n    }\n\n    if (app) {\n      initCommunicator(iframeRef, app)\n    }\n\n    return () => {\n      communicatorInstance?.clear()\n    }\n  }, [app, iframeRef])\n\n  useEffect(() => {\n    const id = Math.random().toString(36).slice(2)\n\n    communicator?.send(\n      {\n        darkMode: isDarkMode,\n      },\n      id,\n    )\n  }, [communicator, isDarkMode])\n\n  // Adding communicator logic for the required SDK Methods\n  // We don't need to unsubscribe from the events because there can be just one subscription\n  // per event type and the next effect run will simply replace the handlers\n  useEffect(() => {\n    communicator?.on(Methods.getTxBySafeTxHash, (msg) => {\n      const { safeTxHash } = msg.data.params as GetTxBySafeTxHashParams\n\n      return handlers.onGetTxBySafeTxHash(safeTxHash)\n    })\n\n    communicator?.on(Methods.getEnvironmentInfo, handlers.onGetEnvironmentInfo)\n\n    communicator?.on(Methods.getSafeInfo, handlers.onGetSafeInfo)\n\n    communicator?.on(Methods.getSafeBalances, (msg) => {\n      const { currency = 'usd' } = msg.data.params as GetBalanceParams\n\n      return handlers.onGetSafeBalances(currency)\n    })\n\n    communicator?.on(Methods.rpcCall, async (msg) => {\n      const params = msg.data.params as RPCPayload\n\n      if (params.call === RPC_CALLS.safe_setSettings) {\n        const settings = params.params[0] as SafeSettings\n        return handlers.onSetSafeSettings(settings)\n      }\n\n      if (!safeAppWeb3Provider) {\n        throw new Error('SafeAppWeb3Provider is not initialized')\n      }\n\n      try {\n        return await safeAppWeb3Provider.send(params.call, params.params)\n      } catch (err) {\n        throw new Error((err as JsonRpcResponse).error)\n      }\n    })\n\n    communicator?.on(Methods.sendTransactions, (msg) => {\n      const { txs, params } = msg.data.params as SendTransactionsParams\n\n      const transactions = txs.map(({ to, value, data }) => {\n        return {\n          to: getAddress(to),\n          value: value ? BigInt(value).toString() : '0',\n          data: data || '0x',\n        }\n      })\n\n      handlers.onConfirmTransactions(transactions, msg.data.id, params)\n    })\n\n    communicator?.on(Methods.signMessage, (msg) => {\n      const { message } = msg.data.params as SignMessageParams\n      const sdkVersion = msg.data.env.sdkVersion\n      handlers.onSignMessage(message, msg.data.id, Methods.signMessage, sdkVersion)\n    })\n\n    communicator?.on(Methods.getOffChainSignature, (msg) => {\n      return handlers.onGetOffChainSignature(msg.data.params as string)\n    })\n\n    communicator?.on(Methods.signTypedMessage, (msg) => {\n      const { typedData } = msg.data.params as SignTypedMessageParams\n      const sdkVersion = msg.data.env.sdkVersion\n      handlers.onSignMessage(typedData, msg.data.id, Methods.signTypedMessage, sdkVersion)\n    })\n\n    communicator?.on(Methods.getChainInfo, handlers.onGetChainInfo)\n\n    communicator?.on(Methods.wallet_getPermissions, (msg) => {\n      return handlers.onGetPermissions(msg.origin)\n    })\n\n    communicator?.on(Methods.wallet_requestPermissions, (msg) => {\n      handlers.onSetPermissions({\n        origin: msg.origin,\n        request: msg.data.params as PermissionRequest[],\n        requestId: msg.data.id,\n      })\n    })\n\n    communicator?.on(Methods.requestAddressBook, (msg) => {\n      return handlers.onRequestAddressBook(msg.origin)\n    })\n\n    // TODO: it will be moved to safe-apps-sdk soon\n    communicator?.on('getCurrentTheme' as Methods, (msg) => {\n      communicator.send(\n        {\n          darkMode: isDarkMode,\n        },\n        msg.data.id,\n      )\n    })\n  }, [safeAppWeb3Provider, handlers, chain, communicator, isDarkMode])\n\n  return communicator\n}\n\nexport default useAppCommunicator\n","import { useCallback } from 'react'\nimport useChainId from '@/hooks/useChainId'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport useIsSafeOwner from '@/hooks/useIsSafeOwner'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { getLegacyChainName } from '../utils'\nimport { useNestedSafeOwners } from '@/hooks/useNestedSafeOwners'\n\nconst useGetSafeInfo = () => {\n  const { safe, safeAddress } = useSafeInfo()\n  const isOwner = useIsSafeOwner()\n  const nestedSafeOwners = useNestedSafeOwners()\n  const chainId = useChainId()\n  const chain = useCurrentChain()\n  const chainName = chain?.chainName || ''\n\n  return useCallback(() => {\n    return {\n      safeAddress,\n      chainId: parseInt(chainId, 10),\n      owners: safe.owners.map((owner) => owner.value),\n      threshold: safe.threshold,\n      isReadOnly: !isOwner && (nestedSafeOwners == null || nestedSafeOwners.length === 0),\n      nonce: safe.nonce,\n      implementation: safe.implementation.value,\n      modules: safe.modules ? safe.modules.map((module) => module.value) : null,\n      fallbackHandler: safe.fallbackHandler ? safe.fallbackHandler?.value : null,\n      guard: safe.guard?.value || null,\n      version: safe.version,\n      network: getLegacyChainName(chainName || '', chainId).toUpperCase(),\n    }\n  }, [\n    safeAddress,\n    chainId,\n    safe.owners,\n    safe.threshold,\n    safe.nonce,\n    safe.implementation.value,\n    safe.modules,\n    safe.fallbackHandler,\n    safe.guard?.value,\n    safe.version,\n    isOwner,\n    nestedSafeOwners,\n    chainName,\n  ])\n}\n\nexport default useGetSafeInfo\n","import { isHexString, toUtf8String } from 'ethers'\nimport { SafeAppAccessPolicyTypes } from '@safe-global/safe-gateway-typescript-sdk'\nimport { SafeAppFeatures } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { SafeAppData } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { BaseTransaction, ChainInfo } from '@safe-global/safe-apps-sdk'\n\nimport { formatVisualAmount } from '@/utils/formatters'\nimport { validateAddress } from '@/utils/validation'\nimport type { SafeAppDataWithPermissions } from './types'\nimport { SafeAppsTag } from '@/config/constants'\n\nconst validateTransaction = (t: BaseTransaction): boolean => {\n  if (!['string', 'number'].includes(typeof t.value)) {\n    return false\n  }\n\n  if (typeof t.value === 'string' && !/^(0x)?[0-9a-f]+$/i.test(t.value)) {\n    return false\n  }\n\n  const isAddressValid = validateAddress(t.to) === undefined\n  return isAddressValid && !!t.data && typeof t.data === 'string'\n}\n\nexport const isTxValid = (txs: BaseTransaction[]): boolean => txs.length > 0 && txs.every((t) => validateTransaction(t))\n\nexport const getInteractionTitle = (value?: string, chain?: ChainInfo) => {\n  const { decimals, symbol } = chain!.nativeCurrency\n  return `Interact with${\n    Number(value) !== 0 ? ` (and send ${formatVisualAmount(value || 0, decimals)} ${symbol} to)` : ''\n  }:`\n}\n\n/**\n * If message is a hex value and is Utf8 encoded string we decode it, else we return the raw message\n * @param {string} message raw input message\n * @returns {string}\n */\nexport const getDecodedMessage = (message: string): string => {\n  if (isHexString(message)) {\n    // If is a hex string we try to extract a message\n    try {\n      return toUtf8String(message)\n    } catch (e) {\n      // the hex string is not UTF8 encoding so we will return the raw message.\n    }\n  }\n\n  return message\n}\n\nexport const getLegacyChainName = (chainName: string, chainId: string): string => {\n  let network = chainName\n\n  switch (chainId) {\n    case '1':\n      network = 'MAINNET'\n      break\n    case '100':\n      network = 'XDAI'\n  }\n\n  return network\n}\n\nexport const getEmptySafeApp = (url = '', appData?: SafeAppData): SafeAppDataWithPermissions => {\n  return {\n    id: Math.round(Math.random() * 1e9 + 1e6),\n    url,\n    name: 'unknown',\n    iconUrl: '/images/apps/apps-icon.svg',\n    description: '',\n    chainIds: [],\n    accessControl: {\n      type: SafeAppAccessPolicyTypes.NoRestrictions,\n    },\n    tags: [],\n    features: [],\n    developerWebsite: '',\n    socialProfiles: [],\n    ...appData,\n    safeAppsPermissions: [],\n  }\n}\n\nexport const getOrigin = (url?: string): string => {\n  if (!url) return ''\n\n  const { origin } = new URL(url)\n\n  return origin\n}\n\nexport const isOptimizedForBatchTransactions = (safeApp: SafeAppData) =>\n  safeApp.features?.includes(SafeAppFeatures.BATCHED_TRANSACTIONS)\n\n// some categories are used internally and we dont want to display them in the UI\nexport const filterInternalCategories = (categories: string[]): string[] => {\n  const internalCategories = Object.values(SafeAppsTag)\n  return categories.filter((tag) => !internalCategories.some((internalCategory) => tag === internalCategory))\n}\n\n// Get unique tags from all apps\nexport const getUniqueTags = (apps: SafeAppData[]): string[] => {\n  // Get the list of categories from the safeAppsList\n  const tags = apps.reduce<Set<string>>((result, app) => {\n    app.tags.forEach((tag) => result.add(tag))\n    return result\n  }, new Set())\n\n  // Filter out internal tags\n  const filteredTags = filterInternalCategories(Array.from(tags))\n\n  // Sort alphabetically\n  return filteredTags.sort()\n}\n","import { useState, useEffect, useContext, type MutableRefObject } from 'react'\nimport type { UseAppCommunicatorHandlers } from '@/components/safe-apps/AppFrame/useAppCommunicator'\nimport useAppCommunicator, { CommunicatorMessages } from '@/components/safe-apps/AppFrame/useAppCommunicator'\nimport type { Methods } from '@safe-global/safe-apps-sdk'\nimport {\n  type BaseTransaction,\n  type EIP712TypedData,\n  type RequestId,\n  type SafeSettings,\n  type SendTransactionRequestParams,\n} from '@safe-global/safe-apps-sdk'\nimport { SafeAppsTxFlow, SignMessageFlow, SignMessageOnChainFlow } from '@/components/tx-flow/flows'\nimport { isOffchainEIP1271Supported } from '@/utils/safe-messages'\nimport {\n  getBalances,\n  getSafeMessage,\n  getTransactionDetails,\n  type SafeAppData,\n} from '@safe-global/safe-gateway-typescript-sdk'\nimport useGetSafeInfo from '@/components/safe-apps/AppFrame/useGetSafeInfo'\nimport { FEATURES, hasFeature } from '@/utils/chains'\nimport { isSafeMessageListItem } from '@/utils/safe-message-guards'\nimport { TxModalContext } from '@/components/tx-flow'\nimport { selectOnChainSigning, selectTokenList, TOKEN_LISTS } from '@/store/settingsSlice'\nimport { useAppSelector } from '@/store'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { selectSafeMessages } from '@/store/safeMessagesSlice'\nimport { trackSafeAppEvent, SAFE_APPS_EVENTS, trackEvent } from '@/services/analytics'\nimport { safeMsgSubscribe, SafeMsgEvent } from '@/services/safe-messages/safeMsgEvents'\nimport { txSubscribe, TxEvent } from '@/services/tx/txEvents'\nimport type { ChainInfo as WebCoreChainInfo } from '@safe-global/safe-gateway-typescript-sdk/dist/types/chains'\nimport useChainId from '@/hooks/useChainId'\nimport type AppCommunicator from '@/services/safe-apps/AppCommunicator'\nimport useBalances from '@/hooks/useBalances'\n\nexport const useCustomAppCommunicator = (\n  iframeRef: MutableRefObject<HTMLIFrameElement | null>,\n  app: SafeAppData,\n  chain: WebCoreChainInfo | undefined,\n  overrideHandlers?: Partial<UseAppCommunicatorHandlers>,\n): AppCommunicator | undefined => {\n  const [currentRequestId, setCurrentRequestId] = useState<RequestId | undefined>()\n  const safeMessages = useAppSelector(selectSafeMessages)\n  const { setTxFlow } = useContext(TxModalContext)\n  const { safe, safeAddress } = useSafeInfo()\n  const onChainSigning = useAppSelector(selectOnChainSigning)\n  const [settings, setSettings] = useState<SafeSettings>({\n    offChainSigning: true,\n  })\n  const appData = app\n  const onTxFlowClose = () => {\n    setCurrentRequestId((prevId) => {\n      if (prevId) {\n        communicator?.send(CommunicatorMessages.REJECT_TRANSACTION_MESSAGE, prevId, true)\n        trackSafeAppEvent(SAFE_APPS_EVENTS.PROPOSE_TRANSACTION_REJECTED, app.name)\n      }\n      return undefined\n    })\n  }\n  const tokenlist = useAppSelector(selectTokenList)\n  const chainId = useChainId()\n  const { balances } = useBalances()\n\n  const communicator = useAppCommunicator(iframeRef, appData, chain, {\n    onConfirmTransactions: (txs: BaseTransaction[], requestId: RequestId, params?: SendTransactionRequestParams) => {\n      const data = {\n        app: appData,\n        appId: appData ? String(appData.id) : undefined,\n        requestId,\n        txs,\n        params,\n      }\n\n      setCurrentRequestId(requestId)\n      trackEvent({ ...SAFE_APPS_EVENTS.OPEN_TRANSACTION_MODAL, label: appData.name })\n      setTxFlow(<SafeAppsTxFlow data={data} />, onTxFlowClose)\n    },\n    onSignMessage: (\n      message: string | EIP712TypedData,\n      requestId: string,\n      method: Methods.signMessage | Methods.signTypedMessage,\n      sdkVersion: string,\n    ) => {\n      const isOffChainSigningSupported = isOffchainEIP1271Supported(safe, chain, sdkVersion)\n      const signOffChain = isOffChainSigningSupported && !onChainSigning && !!settings.offChainSigning\n\n      setCurrentRequestId(requestId)\n\n      if (signOffChain) {\n        setTxFlow(\n          <SignMessageFlow\n            logoUri={appData?.iconUrl || ''}\n            name={appData?.name || ''}\n            message={message}\n            origin={appData?.url}\n            requestId={requestId}\n          />,\n          onTxFlowClose,\n        )\n      } else {\n        setTxFlow(\n          <SignMessageOnChainFlow\n            props={{\n              app: appData,\n              requestId,\n              message,\n              method,\n            }}\n          />,\n        )\n      }\n    },\n    onGetPermissions: () => [],\n    onSetPermissions: () => {},\n    onRequestAddressBook: () => [],\n    onGetTxBySafeTxHash: (safeTxHash) => getTransactionDetails(chainId, safeTxHash),\n    onGetEnvironmentInfo: () => ({\n      origin: document.location.origin,\n    }),\n    onGetSafeInfo: useGetSafeInfo(),\n    onGetSafeBalances: (currency) => {\n      const isDefaultTokenlistSupported = chain && hasFeature(chain, FEATURES.DEFAULT_TOKENLIST)\n\n      return safe.deployed\n        ? getBalances(chainId, safeAddress, currency, {\n            exclude_spam: true,\n            trusted: isDefaultTokenlistSupported && TOKEN_LISTS.TRUSTED === tokenlist,\n          })\n        : Promise.resolve(balances)\n    },\n    onGetChainInfo: () => {\n      if (!chain) return\n\n      const { nativeCurrency, chainName, chainId, shortName, blockExplorerUriTemplate } = chain\n\n      return {\n        chainName,\n        chainId,\n        shortName,\n        nativeCurrency,\n        blockExplorerUriTemplate,\n      }\n    },\n    onSetSafeSettings: (safeSettings: SafeSettings) => {\n      const newSettings: SafeSettings = {\n        ...settings,\n        offChainSigning: !!safeSettings.offChainSigning,\n      }\n\n      setSettings(newSettings)\n\n      return newSettings\n    },\n    onGetOffChainSignature: async (messageHash: string) => {\n      const safeMessage = safeMessages.data?.results\n        ?.filter(isSafeMessageListItem)\n        ?.find((item) => item.messageHash === messageHash)\n\n      if (safeMessage) {\n        return safeMessage.preparedSignature\n      }\n\n      try {\n        const { preparedSignature } = await getSafeMessage(chainId, messageHash)\n        return preparedSignature\n      } catch {\n        return ''\n      }\n    },\n    ...overrideHandlers,\n  })\n\n  useEffect(() => {\n    const unsubscribe = txSubscribe(TxEvent.SAFE_APPS_REQUEST, async ({ safeAppRequestId, safeTxHash }) => {\n      if (safeAppRequestId && currentRequestId === safeAppRequestId) {\n        trackSafeAppEvent(SAFE_APPS_EVENTS.PROPOSE_TRANSACTION, appData?.name)\n        communicator?.send({ safeTxHash }, safeAppRequestId)\n      }\n    })\n\n    return unsubscribe\n  }, [chainId, communicator, currentRequestId, appData.name])\n\n  useEffect(() => {\n    const unsubscribe = safeMsgSubscribe(SafeMsgEvent.SIGNATURE_PREPARED, ({ messageHash, requestId, signature }) => {\n      if (requestId && currentRequestId === requestId) {\n        communicator?.send({ messageHash, signature }, requestId)\n      }\n    })\n\n    return unsubscribe\n  }, [communicator, currentRequestId])\n\n  return communicator\n}\n"],"names":["AppCommunicator","constructor","iframeRef","config","handlers","Map","on","method","handler","set","isValidMessage","msg","data","hasOwnProperty","sentFromIframe","current","contentWindow","source","knownMethod","Object","values","Methods","includes","isThemeInfoMethod","canHandleMessage","Boolean","get","send","requestId","error","sdkVersion","getSDKVersion","MessageFormatter","makeErrorResponse","makeResponse","postMessage","handleIncomingMessage","validMessage","hasHandler","onMessage","response","id","e","asError","message","onError","clear","window","removeEventListener","addEventListener","CommunicatorMessages","app","chain","communicator","setCommunicator","useState","useAppCommunicator","undefined","customRpc","useAppSelector","selectRpc","isDarkMode","useDarkMode","safeAppWeb3Provider","useMemo","createSafeAppsWeb3Provider","chainId","useEffect","communicatorInstance","initCommunicator","isCustomApp","trackSafeAppEvent","SAFE_APPS_EVENTS","SAFE_APP_SDK_METHOD_CALL","url","name","ethMethod","params","call","version","env","logError","Errors","_901","Math","random","toString","slice","darkMode","getTxBySafeTxHash","safeTxHash","onGetTxBySafeTxHash","getEnvironmentInfo","onGetEnvironmentInfo","getSafeInfo","onGetSafeInfo","getSafeBalances","currency","onGetSafeBalances","rpcCall","RPC_CALLS","safe_setSettings","settings","onSetSafeSettings","err","sendTransactions","txs","transactions","map","to","value","getAddress","BigInt","onConfirmTransactions","signMessage","onSignMessage","getOffChainSignature","onGetOffChainSignature","signTypedMessage","typedData","getChainInfo","onGetChainInfo","wallet_getPermissions","onGetPermissions","origin","wallet_requestPermissions","onSetPermissions","request","requestAddressBook","onRequestAddressBook","safe","useGetSafeInfo","safeAddress","useSafeInfo","isOwner","useIsSafeOwner","nestedSafeOwners","useNestedSafeOwners","useChainId","useCurrentChain","chainName","useCallback","parseInt","owners","owner","threshold","isReadOnly","length","nonce","implementation","modules","module","fallbackHandler","guard","network","getLegacyChainName","toUpperCase","validateTransaction","t","test","validateAddress","isTxValid","every","isHexString","toUtf8String","appData","round","iconUrl","description","chainIds","accessControl","type","SafeAppAccessPolicyTypes","NoRestrictions","tags","features","developerWebsite","socialProfiles","safeAppsPermissions","URL","safeApp","SafeAppFeatures","BATCHED_TRANSACTIONS","categories","internalCategories","SafeAppsTag","filter","some","tag","internalCategory","filterInternalCategories","Array","from","apps","reduce","result","forEach","add","Set","sort","useCustomAppCommunicator","overrideHandlers","currentRequestId","setCurrentRequestId","safeMessages","selectSafeMessages","setTxFlow","useContext","TxModalContext","onChainSigning","selectOnChainSigning","setSettings","offChainSigning","onTxFlowClose","prevId","REJECT_TRANSACTION_MESSAGE","PROPOSE_TRANSACTION_REJECTED","tokenlist","selectTokenList","balances","useBalances","appId","String","trackEvent","OPEN_TRANSACTION_MODAL","label","SafeAppsTxFlow","signOffChain","isOffchainEIP1271Supported","SignMessageFlow","logoUri","SignMessageOnChainFlow","props","getTransactionDetails","document","location","isDefaultTokenlistSupported","hasFeature","FEATURES","DEFAULT_TOKENLIST","deployed","getBalances","exclude_spam","trusted","TOKEN_LISTS","TRUSTED","Promise","resolve","nativeCurrency","shortName","blockExplorerUriTemplate","newSettings","safeSettings","messageHash","safeMessage","results","isSafeMessageListItem","find","item","preparedSignature","getSafeMessage","txSubscribe","TxEvent","SAFE_APPS_REQUEST","safeAppRequestId","PROPOSE_TRANSACTION","safeMsgSubscribe","SafeMsgEvent","SIGNATURE_PREPARED","signature"],"sourceRoot":"","ignoreList":[]}