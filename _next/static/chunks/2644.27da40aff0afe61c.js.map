{"version":3,"file":"static/chunks/2644.27da40aff0afe61c.js","mappings":"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","sources":["webpack://_N_E/./src/hooks/wallets/wallets.ts","webpack://_N_E/./src/services/onboard.ts"],"sourcesContent":["import { WC_PROJECT_ID } from '@/config/constants'\nimport type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { InitOptions } from '@web3-onboard/core'\nimport coinbaseModule from '@web3-onboard/coinbase'\nimport injectedWalletModule from '@web3-onboard/injected-wallets'\nimport walletConnect from '@web3-onboard/walletconnect'\nimport pkModule from '@/services/private-key-module'\n\nimport { CGW_NAMES, WALLET_KEYS } from './consts'\n\nconst prefersDarkMode = (): boolean => {\n  return window?.matchMedia('(prefers-color-scheme: dark)')?.matches\n}\n\ntype WalletInits = InitOptions['wallets']\ntype WalletInit = WalletInits extends Array<infer U> ? U : never\n\nconst walletConnectV2 = (chain: ChainInfo) => {\n  // WalletConnect v2 requires a project ID\n  if (!WC_PROJECT_ID) {\n    return () => null\n  }\n\n  return walletConnect({\n    version: 2,\n    projectId: WC_PROJECT_ID,\n    qrModalOptions: {\n      themeVariables: {\n        '--wcm-z-index': '1302',\n      },\n      themeMode: prefersDarkMode() ? 'dark' : 'light',\n    },\n    requiredChains: [parseInt(chain.chainId)],\n    dappUrl: location.origin,\n  })\n}\n\nconst WALLET_MODULES: Partial<{ [_key in WALLET_KEYS]: (chain: ChainInfo) => WalletInit }> = {\n  [WALLET_KEYS.INJECTED]: () => injectedWalletModule() as WalletInit,\n  [WALLET_KEYS.WALLETCONNECT_V2]: (chain) => walletConnectV2(chain) as WalletInit,\n  [WALLET_KEYS.COINBASE]: () => coinbaseModule({ darkMode: prefersDarkMode() }) as WalletInit,\n  [WALLET_KEYS.PK]: (chain) => pkModule(chain.chainId, chain.rpcUri) as WalletInit,\n}\n\nexport const getAllWallets = (chain: ChainInfo): WalletInits => {\n  return Object.values(WALLET_MODULES).map((module) => module(chain))\n}\n\nexport const isWalletSupported = (disabledWallets: string[], walletLabel: string): boolean => {\n  const legacyWalletName = CGW_NAMES?.[walletLabel.toUpperCase() as WALLET_KEYS]\n  return !disabledWallets.includes(legacyWalletName || walletLabel)\n}\n\nexport const getSupportedWallets = (chain: ChainInfo): WalletInits => {\n  const enabledWallets = Object.entries(WALLET_MODULES).filter(([key]) => isWalletSupported(chain.disabledWallets, key))\n\n  if (enabledWallets.length === 0) {\n    return [injectedWalletModule()]\n  }\n\n  return enabledWallets.map(([, module]) => module(chain))\n}\n","import Onboard, { type OnboardAPI } from '@web3-onboard/core'\nimport type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport { getAllWallets } from '@/hooks/wallets/wallets'\nimport { getRpcServiceUrl } from '@/hooks/wallets/web3'\nimport type { EnvState } from '@/store/settingsSlice'\nimport { numberToHex } from '@/utils/hex'\nimport { BRAND_NAME } from '@/config/constants'\n\nlet onboard: OnboardAPI | null = null\n\nexport const createOnboard = (\n  chainConfigs: ChainInfo[],\n  currentChain: ChainInfo,\n  rpcConfig: EnvState['rpc'] | undefined,\n): OnboardAPI => {\n  if (onboard) return onboard\n\n  const wallets = getAllWallets(currentChain)\n\n  const chains = chainConfigs.map((cfg) => ({\n    // We cannot use ethers' toBeHex here as we do not want to pad it to an even number of characters.\n    id: numberToHex(parseInt(cfg.chainId)),\n    label: cfg.chainName,\n    rpcUrl: rpcConfig?.[cfg.chainId] || getRpcServiceUrl(cfg.rpcUri),\n    token: cfg.nativeCurrency.symbol,\n    color: cfg.theme.backgroundColor,\n    publicRpcUrl: cfg.publicRpcUri.value,\n    blockExplorerUrl: new URL(cfg.blockExplorerUriTemplate.address).origin,\n  }))\n\n  onboard = Onboard({\n    wallets,\n\n    chains,\n\n    accountCenter: {\n      mobile: { enabled: false },\n      desktop: { enabled: false },\n    },\n\n    notify: {\n      enabled: false,\n    },\n\n    appMetadata: {\n      name: BRAND_NAME,\n      icon: location.origin + '/images/logo-round.svg',\n      description: `${BRAND_NAME} â€“ smart contract wallet for Ethereum (ex-Gnosis Safe multisig)`,\n    },\n\n    connect: {\n      removeWhereIsMyWalletWarning: true,\n      autoConnectLastWallet: false,\n    },\n  })\n\n  return onboard\n}\n"],"names":["prefersDarkMode","window","matchMedia","matches","walletConnectV2","WC_PROJECT_ID","walletConnect","version","projectId","qrModalOptions","themeVariables","themeMode","requiredChains","parseInt","chain","chainId","dappUrl","location","origin","WALLET_MODULES","WALLET_KEYS","INJECTED","injectedWalletModule","WALLETCONNECT_V2","COINBASE","coinbaseModule","darkMode","PK","pkModule","rpcUri","getAllWallets","Object","values","map","module","isWalletSupported","disabledWallets","walletLabel","legacyWalletName","CGW_NAMES","toUpperCase","includes","enabledWallets","entries","filter","key","length","onboard","createOnboard","chainConfigs","currentChain","rpcConfig","wallets","chains","id","numberToHex","cfg","label","chainName","rpcUrl","getRpcServiceUrl","token","nativeCurrency","symbol","color","theme","backgroundColor","publicRpcUrl","publicRpcUri","value","blockExplorerUrl","URL","blockExplorerUriTemplate","address","Onboard","accountCenter","mobile","enabled","desktop","notify","appMetadata","name","BRAND_NAME","icon","description","connect","removeWhereIsMyWalletWarning","autoConnectLastWallet"],"sourceRoot":"","ignoreList":[]}