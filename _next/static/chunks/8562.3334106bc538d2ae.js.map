{"version":3,"file":"static/chunks/8562.3334106bc538d2ae.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/icons-material/esm/ArrowBack.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/RotateLeft.js","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/common/ProgressBar/index.tsx","webpack://_N_E/./src/components/tx/security/tenderly/types.ts","webpack://_N_E/./src/components/tx/security/tenderly/useSimulation.ts","webpack://_N_E/./src/components/tx-flow/TxInfoProvider.tsx","webpack://_N_E/./src/hooks/usePreviousNonces.ts","webpack://_N_E/./src/components/tx-flow/common/TxNonce/index.tsx","webpack://_N_E/./src/components/tx-flow/common/TxStatusWidget/index.tsx","webpack://_N_E/./src/components/tx/security/SecurityWarnings.tsx","webpack://_N_E/./src/components/tx-flow/common/TxLayout/index.tsx","webpack://_N_E/./src/services/security/modules/BlockaidModule/index.ts","webpack://_N_E/./src/components/tx/security/blockaid/useBlockaid.ts","webpack://_N_E/./src/components/tx/security/shared/TxSecurityContext.tsx","webpack://_N_E/./src/components/tx/security/tenderly/index.tsx","webpack://_N_E/./src/components/tx/security/tenderly/utils.ts","webpack://_N_E/./src/services/security/modules/types.ts","webpack://_N_E/./src/components/common/ProgressBar/styles.module.css","webpack://_N_E/./src/components/tx-flow/common/TxLayout/styles.module.css","webpack://_N_E/./src/components/tx-flow/common/TxNonce/styles.module.css","webpack://_N_E/./src/components/tx-flow/common/TxStatusWidget/styles.module.css","webpack://_N_E/./src/components/tx/security/shared/styles.module.css","webpack://_N_E/./src/components/tx/security/tenderly/styles.module.css","webpack://_N_E/./public/images/messages/created.svg","webpack://_N_E/./public/images/messages/signed.svg"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M7.11 8.53 5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47M6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47m1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93\"\n}), 'RotateLeft');","export * from \"/Users/liuxiaolin/Documents/other/safe-wallet-monorepo/apps/web/src/components/common/Mui/index.tsx\"","import { LinearProgress } from '@mui/material'\nimport type { LinearProgressProps } from '@mui/material'\n\nimport css from './styles.module.css'\n\nexport const ProgressBar = (props: LinearProgressProps) => {\n  return <LinearProgress className={css.progressBar} variant=\"determinate\" color=\"secondary\" {...props} />\n}\n","export enum FETCH_STATUS {\n  NOT_ASKED = 'NOT_ASKED',\n  LOADING = 'LOADING',\n  SUCCESS = 'SUCCESS',\n  ERROR = 'ERROR',\n}\n\n// types were found in Uniswap repository\n// https://github.com/Uniswap/governance-seatbelt/blob/e2c6a0b11d1660f3bd934dab0d9df3ca6f90a1a0/types.d.ts#L123\n\nexport type StateObject = {\n  balance?: string\n  code?: string\n  storage?: Record<string, string>\n}\n\ntype ContractObject = {\n  contractName: string\n  source: string\n  sourcePath: string\n  compiler: {\n    name: 'solc'\n    version: string\n  }\n  networks: Record<\n    string,\n    {\n      events?: Record<string, string>\n      links?: Record<string, string>\n      address: string\n      transactionHash?: string\n    }\n  >\n}\n\nexport type TenderlySimulatePayload = {\n  network_id: string\n  block_number?: number\n  transaction_index?: number\n  from: string\n  to: string\n  input: string\n  gas: number\n  gas_price?: string\n  value?: string\n  simulation_type?: 'full' | 'quick'\n  save?: boolean\n  save_if_fails?: boolean\n  state_objects?: Record<string, StateObject>\n  contracts?: ContractObject[]\n  block_header?: {\n    number?: string\n    timestamp?: string\n  }\n  generate_access_list?: boolean\n}\n\n// --- Tenderly types, Response ---\n// NOTE: These type definitions were autogenerated using https://app.quicktype.io/, so are almost\n// certainly not entirely accurate (and they have some interesting type names)\n\nexport interface TenderlySimulation {\n  transaction: Transaction\n  simulation: Simulation\n  contracts: TenderlyContract[]\n  generated_access_list: GeneratedAccessList[]\n}\n\ninterface TenderlyContract {\n  id: string\n  contract_id: string\n  balance: string\n  network_id: string\n  public: boolean\n  export: boolean\n  verified_by: string\n  verification_date: null\n  address: string\n  contract_name: string\n  ens_domain: null\n  type: string\n  evm_version: string\n  compiler_version: string\n  optimizations_used: boolean\n  optimization_runs: number\n  libraries: null\n  data: Data\n  creation_block: number\n  creation_tx: string\n  creator_address: string\n  created_at: Date\n  number_of_watches: null\n  language: string\n  in_project: boolean\n  number_of_files: number\n  standard?: string\n  standards?: string[]\n  token_data?: TokenData\n}\n\ninterface Data {\n  main_contract: number\n  contract_info: ContractInfo[]\n  abi: ABI[]\n  raw_abi: null\n}\n\ninterface ABI {\n  type: ABIType\n  name: string\n  constant: boolean\n  anonymous: boolean\n  inputs: SoltypeElement[]\n  outputs: Output[] | null\n}\n\ninterface SoltypeElement {\n  name: string\n  type: SoltypeType\n  storage_location: StorageLocation\n  components: SoltypeElement[] | null\n  offset: number\n  index: string\n  indexed: boolean\n  simple_type?: Type\n}\n\ninterface Type {\n  type: SimpleTypeType\n}\n\nenum SimpleTypeType {\n  Address = 'address',\n  Bool = 'bool',\n  Bytes = 'bytes',\n  Slice = 'slice',\n  String = 'string',\n  Uint = 'uint',\n}\n\nenum StorageLocation {\n  Calldata = 'calldata',\n  Default = 'default',\n  Memory = 'memory',\n  Storage = 'storage',\n}\n\nenum SoltypeType {\n  Address = 'address',\n  Bool = 'bool',\n  Bytes32 = 'bytes32',\n  MappingAddressUint256 = 'mapping (address => uint256)',\n  MappingUint256Uint256 = 'mapping (uint256 => uint256)',\n  String = 'string',\n  Tuple = 'tuple',\n  TypeAddress = 'address[]',\n  TypeTuple = 'tuple[]',\n  Uint16 = 'uint16',\n  Uint256 = 'uint256',\n  Uint48 = 'uint48',\n  Uint56 = 'uint56',\n  Uint8 = 'uint8',\n}\n\ninterface Output {\n  name: string\n  type: SoltypeType\n  storage_location: StorageLocation\n  components: SoltypeElement[] | null\n  offset: number\n  index: string\n  indexed: boolean\n  simple_type?: SimpleType\n}\n\ninterface SimpleType {\n  type: SimpleTypeType\n  nested_type?: Type\n}\n\nenum ABIType {\n  Constructor = 'constructor',\n  Event = 'event',\n  Function = 'function',\n}\n\ninterface ContractInfo {\n  id: number\n  path: string\n  name: string\n  source: string\n}\n\ninterface TokenData {\n  symbol: string\n  name: string\n  decimals: number\n}\n\ninterface GeneratedAccessList {\n  address: string\n  storage_keys: string[]\n}\n\ninterface Simulation {\n  id: string\n  project_id: string\n  owner_id: string\n  network_id: string\n  block_number: number\n  transaction_index: number\n  from: string\n  to: string\n  input: string\n  gas: number\n  gas_price: string\n  value: string\n  method: string\n  status: boolean\n  access_list: null\n  queue_origin: string\n  created_at: Date\n}\n\ninterface ErrorInfo {\n  error_message: string\n  address: string\n}\n\ninterface Transaction {\n  hash: string\n  block_hash: string\n  block_number: number\n  from: string\n  gas: number\n  gas_price: number\n  gas_fee_cap: number\n  gas_tip_cap: number\n  cumulative_gas_used: number\n  gas_used: number\n  effective_gas_price: number\n  input: string\n  nonce: number\n  to: string\n  index: number\n  error_message?: string\n  error_info?: ErrorInfo\n  value: string\n  access_list: null\n  status: boolean\n  addresses: string[]\n  contract_ids: string[]\n  network_id: string\n  function_selector: string\n  transaction_info: TransactionInfo\n  timestamp: Date\n  method: string\n  decoded_input: null\n  // Note: manually added (partial keys of `call_trace`)\n  call_trace: Array<{\n    error?: string\n    input: string\n  }>\n}\n\ninterface TransactionInfo {\n  contract_id: string\n  block_number: number\n  transaction_id: string\n  contract_address: string\n  method: string\n  parameters: null\n  intrinsic_gas: number\n  refund_gas: number\n  call_trace: CallTrace\n  stack_trace: null | StackTrace[]\n  logs: Log[] | null\n  state_diff: StateDiff[]\n  raw_state_diff: null\n  console_logs: null\n  created_at: Date\n}\n\ninterface StackTrace {\n  file_index: number\n  contract: string\n  name: string\n  line: number\n  error: string\n  error_reason: string\n  code: string\n  op: string\n  length: number\n}\n\ninterface CallTrace {\n  hash: string\n  contract_name: string\n  function_name: string\n  function_pc: number\n  function_op: string\n  function_file_index: number\n  function_code_start: number\n  function_line_number: number\n  function_code_length: number\n  function_states: CallTraceFunctionState[]\n  caller_pc: number\n  caller_op: string\n  call_type: string\n  from: string\n  from_balance: string\n  to: string\n  to_balance: string\n  value: string\n  caller: Caller\n  block_timestamp: Date\n  gas: number\n  gas_used: number\n  intrinsic_gas: number\n  input: string\n  decoded_input: Input[]\n  state_diff: StateDiff[]\n  logs: Log[]\n  output: string\n  decoded_output: FunctionVariableElement[]\n  network_id: string\n  calls: CallTraceCall[]\n}\n\ninterface Caller {\n  address: string\n  balance: string\n}\n\ninterface CallTraceCall {\n  hash: string\n  contract_name: string\n  function_name: string\n  function_pc: number\n  function_op: string\n  function_file_index: number\n  function_code_start: number\n  function_line_number: number\n  function_code_length: number\n  function_states: CallTraceFunctionState[]\n  function_variables: FunctionVariableElement[]\n  caller_pc: number\n  caller_op: string\n  caller_file_index: number\n  caller_line_number: number\n  caller_code_start: number\n  caller_code_length: number\n  call_type: string\n  from: string\n  from_balance: null\n  to: string\n  to_balance: null\n  value: null\n  caller: Caller\n  block_timestamp: Date\n  gas: number\n  gas_used: number\n  input: string\n  decoded_input: Input[]\n  output: string\n  decoded_output: FunctionVariableElement[]\n  network_id: string\n  calls: PurpleCall[]\n}\n\ninterface PurpleCall {\n  hash: string\n  contract_name: string\n  function_name: string\n  function_pc: number\n  function_op: string\n  function_file_index: number\n  function_code_start: number\n  function_line_number: number\n  function_code_length: number\n  function_states?: FluffyFunctionState[]\n  function_variables?: FunctionVariable[]\n  caller_pc: number\n  caller_op: string\n  caller_file_index: number\n  caller_line_number: number\n  caller_code_start: number\n  caller_code_length: number\n  call_type: string\n  from: string\n  from_balance: null | string\n  to: string\n  to_balance: null | string\n  value: null | string\n  caller: Caller\n  block_timestamp: Date\n  gas: number\n  gas_used: number\n  refund_gas?: number\n  input: string\n  decoded_input: Input[]\n  output: string\n  decoded_output: FunctionVariable[] | null\n  network_id: string\n  calls: FluffyCall[] | null\n}\n\ninterface FluffyCall {\n  hash: string\n  contract_name: string\n  function_name?: string\n  function_pc: number\n  function_op: string\n  function_file_index?: number\n  function_code_start?: number\n  function_line_number?: number\n  function_code_length?: number\n  function_states?: FluffyFunctionState[]\n  function_variables?: FunctionVariable[]\n  caller_pc: number\n  caller_op: string\n  caller_file_index: number\n  caller_line_number: number\n  caller_code_start: number\n  caller_code_length: number\n  call_type: string\n  from: string\n  from_balance: null | string\n  to: string\n  to_balance: null | string\n  value: null | string\n  caller?: Caller\n  block_timestamp: Date\n  gas: number\n  gas_used: number\n  input: string\n  decoded_input?: FunctionVariable[]\n  output: string\n  decoded_output: PurpleDecodedOutput[] | null\n  network_id: string\n  calls: TentacledCall[] | null\n  refund_gas?: number\n}\n\ninterface TentacledCall {\n  hash: string\n  contract_name: string\n  function_name: string\n  function_pc: number\n  function_op: string\n  function_file_index: number\n  function_code_start: number\n  function_line_number: number\n  function_code_length: number\n  function_states: PurpleFunctionState[]\n  caller_pc: number\n  caller_op: string\n  caller_file_index: number\n  caller_line_number: number\n  caller_code_start: number\n  caller_code_length: number\n  call_type: string\n  from: string\n  from_balance: null\n  to: string\n  to_balance: null\n  value: null\n  caller: Caller\n  block_timestamp: Date\n  gas: number\n  gas_used: number\n  input: string\n  decoded_input: FunctionVariableElement[]\n  output: string\n  decoded_output: FunctionVariable[]\n  network_id: string\n  calls: null\n}\n\ninterface FunctionVariableElement {\n  soltype: SoltypeElement\n  value: string\n}\n\ninterface FunctionVariable {\n  soltype: SoltypeElement\n  value: PurpleValue | string\n}\n\ninterface PurpleValue {\n  ballot: string\n  basedOn: string\n  configured: string\n  currency: string\n  cycleLimit: string\n  discountRate: string\n  duration: string\n  fee: string\n  id: string\n  metadata: string\n  number: string\n  projectId: string\n  start: string\n  tapped: string\n  target: string\n  weight: string\n}\n\ninterface PurpleFunctionState {\n  soltype: SoltypeElement\n  value: Record<string, string>\n}\n\ninterface PurpleDecodedOutput {\n  soltype: SoltypeElement\n  value: boolean | PurpleValue | string\n}\n\ninterface FluffyFunctionState {\n  soltype: PurpleSoltype\n  value: Record<string, string>\n}\n\ninterface PurpleSoltype {\n  name: string\n  type: SoltypeType\n  storage_location: StorageLocation\n  components: null\n  offset: number\n  index: string\n  indexed: boolean\n}\n\ninterface Input {\n  soltype: SoltypeElement | null\n  value: boolean | string\n}\n\ninterface CallTraceFunctionState {\n  soltype: PurpleSoltype\n  value: Record<string, string>\n}\n\ninterface Log {\n  name: string | null\n  anonymous: boolean\n  inputs: Input[]\n  raw: LogRaw\n}\n\ninterface LogRaw {\n  address: string\n  topics: string[]\n  data: string\n}\n\ninterface StateDiff {\n  soltype: SoltypeElement | null\n  original: string | Record<string, any>\n  dirty: string | Record<string, any>\n  raw: RawElement[]\n}\n\ninterface RawElement {\n  address: string\n  key: string\n  original: string\n  dirty: string\n}\n","import { useCallback, useMemo, useState } from 'react'\n\nimport { getSimulation, getSimulationLink } from '@/components/tx/security/tenderly/utils'\nimport { FETCH_STATUS, type TenderlySimulation } from '@/components/tx/security/tenderly/types'\nimport { getSimulationPayload, type SimulationTxParams } from '@/components/tx/security/tenderly/utils'\nimport { useAppSelector } from '@/store'\nimport { selectTenderly } from '@/store/settingsSlice'\nimport { asError } from '@/services/exceptions/utils'\n\nexport type UseSimulationReturn =\n  | {\n      _simulationRequestStatus: FETCH_STATUS.NOT_ASKED | FETCH_STATUS.ERROR | FETCH_STATUS.LOADING\n      simulation: undefined\n      simulateTransaction: (params: SimulationTxParams) => void\n      simulationLink: string\n      requestError?: string\n      resetSimulation: () => void\n    }\n  | {\n      _simulationRequestStatus: FETCH_STATUS.SUCCESS\n      simulation: TenderlySimulation\n      simulateTransaction: (params: SimulationTxParams) => void\n      simulationLink: string\n      requestError?: string\n      resetSimulation: () => void\n    }\n\nexport const useSimulation = (): UseSimulationReturn => {\n  const [simulation, setSimulation] = useState<TenderlySimulation | undefined>()\n  const [simulationRequestStatus, setSimulationRequestStatus] = useState<FETCH_STATUS>(FETCH_STATUS.NOT_ASKED)\n  const [requestError, setRequestError] = useState<string | undefined>(undefined)\n  const tenderly = useAppSelector(selectTenderly)\n\n  const simulationLink = useMemo(() => getSimulationLink(simulation?.simulation.id || ''), [simulation])\n\n  const resetSimulation = useCallback(() => {\n    setSimulationRequestStatus(FETCH_STATUS.NOT_ASKED)\n    setRequestError(undefined)\n    setSimulation(undefined)\n  }, [])\n\n  const simulateTransaction = useCallback(\n    async (params: SimulationTxParams) => {\n      setSimulationRequestStatus(FETCH_STATUS.LOADING)\n      setRequestError(undefined)\n\n      try {\n        const simulationPayload = await getSimulationPayload(params)\n\n        const data = await getSimulation(simulationPayload, tenderly)\n\n        setSimulation(data)\n        setSimulationRequestStatus(FETCH_STATUS.SUCCESS)\n      } catch (error) {\n        console.error(error)\n\n        setRequestError(asError(error).message)\n        setSimulationRequestStatus(FETCH_STATUS.ERROR)\n      }\n    },\n    [tenderly],\n  )\n\n  return {\n    simulateTransaction,\n    // This is only used by the provider\n    _simulationRequestStatus: simulationRequestStatus,\n    simulation,\n    simulationLink,\n    requestError,\n    resetSimulation,\n  } as UseSimulationReturn\n}\n","import { createContext, type ReactElement } from 'react'\n\nimport { useSimulation, type UseSimulationReturn } from '@/components/tx/security/tenderly/useSimulation'\nimport { FETCH_STATUS, type TenderlySimulation } from '@/components/tx/security/tenderly/types'\n\nconst getCallTraceErrors = (simulation?: TenderlySimulation) => {\n  if (!simulation || !simulation.simulation.status) {\n    return []\n  }\n\n  return simulation.transaction.call_trace.filter((call) => call.error)\n}\n\ntype SimulationStatus = {\n  isLoading: boolean\n  isFinished: boolean\n  isSuccess: boolean\n  isCallTraceError: boolean\n  isError: boolean\n}\n\nexport const TxInfoContext = createContext<{\n  simulation: UseSimulationReturn\n  status: SimulationStatus\n}>({\n  simulation: {\n    simulateTransaction: () => {},\n    simulation: undefined,\n    _simulationRequestStatus: FETCH_STATUS.NOT_ASKED,\n    simulationLink: '',\n    requestError: undefined,\n    resetSimulation: () => {},\n  },\n  status: {\n    isLoading: false,\n    isFinished: false,\n    isSuccess: false,\n    isCallTraceError: false,\n    isError: false,\n  },\n})\n\nexport const TxInfoProvider = ({ children }: { children: ReactElement }) => {\n  const simulation = useSimulation()\n\n  const isLoading = simulation._simulationRequestStatus === FETCH_STATUS.LOADING\n\n  const isFinished =\n    simulation._simulationRequestStatus === FETCH_STATUS.SUCCESS ||\n    simulation._simulationRequestStatus === FETCH_STATUS.ERROR\n\n  const isSuccess = simulation.simulation?.simulation.status || false\n\n  // Safe can emit failure event even though Tenderly simulation succeeds\n  const isCallTraceError = isSuccess && getCallTraceErrors(simulation.simulation).length > 0\n  const isError = simulation._simulationRequestStatus === FETCH_STATUS.ERROR\n\n  const status = {\n    isLoading,\n    isFinished,\n    isSuccess,\n    isCallTraceError,\n    isError,\n  }\n\n  return <TxInfoContext.Provider value={{ simulation, status }}>{children}</TxInfoContext.Provider>\n}\n","import { useMemo } from 'react'\nimport { isMultisigExecutionInfo, isTransactionListItem } from '@/utils/transaction-guards'\nimport uniqBy from 'lodash/uniqBy'\nimport useTxQueue from '@/hooks/useTxQueue'\nimport { type TransactionListPage } from '@safe-global/safe-gateway-typescript-sdk'\n\nexport const _getUniqueQueuedTxs = (page?: TransactionListPage) => {\n  if (!page) {\n    return []\n  }\n\n  const txs = page.results.filter(isTransactionListItem).map((item) => item.transaction)\n\n  return uniqBy(txs, (tx) => {\n    return isMultisigExecutionInfo(tx.executionInfo) ? tx.executionInfo.nonce : ''\n  })\n}\n\nconst usePreviousNonces = () => {\n  const { page } = useTxQueue()\n\n  const previousNonces = useMemo(() => {\n    return _getUniqueQueuedTxs(page)\n      .map((tx) => (isMultisigExecutionInfo(tx.executionInfo) ? tx.executionInfo.nonce : undefined))\n      .filter((nonce): nonce is number => nonce !== undefined)\n  }, [page])\n\n  return previousNonces\n}\n\nexport default usePreviousNonces\n","import { memo, type ReactElement, useContext, useMemo, useState, useEffect } from 'react'\nimport {\n  Autocomplete,\n  Box,\n  IconButton,\n  InputAdornment,\n  Skeleton,\n  Tooltip,\n  Popper,\n  type PopperProps,\n  type MenuItemProps,\n  MenuItem,\n  Typography,\n  ListSubheader,\n  type ListSubheaderProps,\n} from '@mui/material'\nimport { createFilterOptions } from '@mui/material/Autocomplete'\nimport { Controller, useForm } from 'react-hook-form'\n\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport RotateLeftIcon from '@mui/icons-material/RotateLeft'\nimport NumberField from '@/components/common/NumberField'\nimport { useQueuedTxByNonce } from '@/hooks/useTxQueue'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport useAddressBook from '@/hooks/useAddressBook'\nimport { getLatestTransactions } from '@/utils/tx-list'\nimport { getTransactionType } from '@/hooks/useTransactionType'\nimport usePreviousNonces from '@/hooks/usePreviousNonces'\nimport { isRejectionTx } from '@/utils/transactions'\n\nimport css from './styles.module.css'\nimport classNames from 'classnames'\n\nconst CustomPopper = function ({\n  // Don't set width of Popper to that of the field\n  className,\n  ...props\n}: PopperProps) {\n  return <Popper {...props} className={classNames(className, css.popper)} style={undefined} placement=\"bottom-start\" />\n}\n\nconst NonceFormHeader = memo(function NonceFormSubheader({ children, ...props }: ListSubheaderProps) {\n  return (\n    <ListSubheader {...props} disableSticky>\n      <Typography variant=\"caption\" fontWeight={700} color=\"text.secondary\">\n        {children}\n      </Typography>\n    </ListSubheader>\n  )\n})\n\nconst NonceFormOption = memo(function NonceFormOption({\n  nonce,\n  menuItemProps,\n}: {\n  nonce: string\n  menuItemProps: MenuItemProps\n}): ReactElement {\n  const addressBook = useAddressBook()\n  const transactions = useQueuedTxByNonce(Number(nonce))\n\n  const txLabel = useMemo(() => {\n    const latestTransactions = getLatestTransactions(transactions)\n\n    if (latestTransactions.length === 0) {\n      return\n    }\n\n    const [{ transaction }] = latestTransactions\n    return transaction.txInfo.humanDescription || `${getTransactionType(transaction, addressBook).text} transaction`\n  }, [addressBook, transactions])\n\n  const label = txLabel || 'New transaction'\n\n  return (\n    <MenuItem {...menuItemProps}>\n      <Typography variant=\"body2\">\n        <b>{nonce}</b>&nbsp;- {label}\n      </Typography>\n    </MenuItem>\n  )\n})\n\nconst getFieldMinWidth = (value: string): string => {\n  const MIN_CHARS = 7\n  const MAX_WIDTH = '200px'\n  const clamped = `clamp(calc(${MIN_CHARS}ch + 6px), calc(${Math.max(MIN_CHARS, value.length)}ch + 6px), ${MAX_WIDTH})`\n  return clamped\n}\n\nconst filter = createFilterOptions<string>()\n\nenum TxNonceFormFieldNames {\n  NONCE = 'nonce',\n}\n\nenum ErrorMessages {\n  NONCE_MUST_BE_NUMBER = 'Nonce must be a number',\n  NONCE_TOO_LOW = \"Nonce can't be lower than %%nonce%%\",\n  NONCE_TOO_HIGH = 'Nonce is too high',\n  NONCE_TOO_FAR = 'Nonce is much higher than the current nonce',\n  NONCE_GT_RECOMMENDED = 'Nonce is higher than the recommended nonce',\n  NONCE_MUST_BE_INTEGER = \"Nonce can't contain decimals\",\n}\n\nconst MAX_NONCE_DIFFERENCE = 100\n\nconst TxNonceForm = ({ nonce, recommendedNonce }: { nonce: string; recommendedNonce: string }) => {\n  const { safeTx, setNonce } = useContext(SafeTxContext)\n  const previousNonces = usePreviousNonces().map((nonce) => nonce.toString())\n  const { safe } = useSafeInfo()\n  const [warning, setWarning] = useState<string>('')\n\n  const showRecommendedNonceButton = recommendedNonce !== nonce\n  const isEditable = !safeTx || safeTx?.signatures.size === 0\n  const readOnly = !isEditable || isRejectionTx(safeTx)\n\n  const formMethods = useForm({\n    defaultValues: {\n      [TxNonceFormFieldNames.NONCE]: nonce,\n    },\n    mode: 'all',\n    values: {\n      [TxNonceFormFieldNames.NONCE]: nonce,\n    },\n  })\n\n  const resetNonce = () => {\n    formMethods.setValue(TxNonceFormFieldNames.NONCE, recommendedNonce)\n  }\n\n  useEffect(() => {\n    let message = ''\n    // Warnings\n    if (Number(nonce) > Number(recommendedNonce)) {\n      message = ErrorMessages.NONCE_GT_RECOMMENDED\n    }\n\n    if (Number(nonce) >= safe.nonce + MAX_NONCE_DIFFERENCE) {\n      message = ErrorMessages.NONCE_TOO_FAR\n    }\n\n    setWarning(message)\n  }, [nonce, recommendedNonce, safe.nonce])\n\n  return (\n    <Controller\n      name={TxNonceFormFieldNames.NONCE}\n      control={formMethods.control}\n      rules={{\n        required: 'Nonce is required',\n        // Validation must be async to allow resetting invalid values onBlur\n        validate: async (value) => {\n          // nonce is always valid so no need to validate if the input is the same\n          if (value === nonce) return\n\n          const newNonce = Number(value)\n\n          if (isNaN(newNonce)) {\n            return ErrorMessages.NONCE_MUST_BE_NUMBER\n          }\n\n          if (newNonce < safe.nonce) {\n            return ErrorMessages.NONCE_TOO_LOW.replace('%%nonce%%', safe.nonce.toString())\n          }\n\n          if (newNonce >= Number.MAX_SAFE_INTEGER) {\n            return ErrorMessages.NONCE_TOO_HIGH\n          }\n\n          if (!Number.isInteger(newNonce)) {\n            return ErrorMessages.NONCE_MUST_BE_INTEGER\n          }\n\n          // Update context with valid nonce\n          setNonce(newNonce)\n        },\n      }}\n      render={({ field, fieldState }) => {\n        if (readOnly) {\n          return (\n            <Typography variant=\"body2\" fontWeight={700} ml={-1}>\n              {nonce}\n            </Typography>\n          )\n        }\n\n        return (\n          <Autocomplete\n            value={field.value}\n            freeSolo\n            onChange={(_, value) => field.onChange(value)}\n            onInputChange={(_, value) => field.onChange(value)}\n            onBlur={() => {\n              field.onBlur()\n\n              if (fieldState.error) {\n                formMethods.setValue(field.name, recommendedNonce.toString())\n              }\n            }}\n            options={[recommendedNonce, ...previousNonces]}\n            getOptionLabel={(option) => option.toString()}\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params)\n\n              // Prevent segments from showing recommended, e.g. if recommended is 250, don't show for 2, 5 or 25\n              const shouldShow = !recommendedNonce.includes(params.inputValue)\n              const isQueued = options.some((option) => params.inputValue === option)\n\n              if (params.inputValue !== '' && !isQueued && shouldShow) {\n                filtered.push(recommendedNonce)\n              }\n\n              return filtered\n            }}\n            renderOption={(props, option) => {\n              const isRecommendedNonce = option === recommendedNonce\n              const isInitialPreviousNonce = option === previousNonces[0]\n\n              const { key, ...rest } = props\n\n              return (\n                <div key={key}>\n                  {isRecommendedNonce && <NonceFormHeader>Recommended nonce</NonceFormHeader>}\n                  {isInitialPreviousNonce && <NonceFormHeader sx={{ pt: 3 }}>Replace existing</NonceFormHeader>}\n                  <NonceFormOption menuItemProps={rest} nonce={option} />\n                </div>\n              )\n            }}\n            disableClearable\n            componentsProps={{\n              paper: {\n                elevation: 2,\n              },\n            }}\n            renderInput={(params) => {\n              return (\n                <Tooltip title={fieldState.error?.message || warning} open arrow placement=\"top\">\n                  <NumberField\n                    {...params}\n                    error={!!fieldState.error}\n                    InputProps={{\n                      ...params.InputProps,\n                      name: field.name,\n                      endAdornment: showRecommendedNonceButton ? (\n                        <InputAdornment position=\"end\" className={css.adornment}>\n                          <Tooltip title=\"Reset to recommended nonce\">\n                            <IconButton onClick={resetNonce} size=\"small\" color=\"primary\">\n                              <RotateLeftIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      ) : null,\n                    }}\n                    className={classNames([\n                      css.input,\n                      {\n                        [css.withAdornment]: showRecommendedNonceButton,\n                      },\n                    ])}\n                    sx={{\n                      minWidth: getFieldMinWidth(field.value),\n                    }}\n                  />\n                </Tooltip>\n              )\n            }}\n            PopperComponent={CustomPopper}\n          />\n        )\n      }}\n    />\n  )\n}\n\nconst skeletonMinWidth = getFieldMinWidth('')\n\nconst TxNonce = () => {\n  const { nonce, recommendedNonce } = useContext(SafeTxContext)\n\n  return (\n    <Box data-testid=\"nonce-fld\" display=\"flex\" alignItems=\"center\" gap={1}>\n      Nonce{' '}\n      <Typography component=\"span\" fontWeight={700}>\n        #\n      </Typography>\n      {nonce === undefined || recommendedNonce === undefined ? (\n        <Skeleton width={skeletonMinWidth} height=\"38px\" />\n      ) : (\n        <TxNonceForm nonce={nonce.toString()} recommendedNonce={recommendedNonce.toString()} />\n      )}\n    </Box>\n  )\n}\n\nexport default TxNonce\n","import { useContext } from 'react'\nimport { Divider, IconButton, List, ListItem, ListItemIcon, ListItemText, Paper, Typography } from '@mui/material'\nimport CreatedIcon from '@/public/images/messages/created.svg'\nimport SignedIcon from '@/public/images/messages/signed.svg'\nimport { type TransactionSummary } from '@safe-global/safe-gateway-typescript-sdk'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { isMultisigExecutionInfo, isSignableBy, isConfirmableBy } from '@/utils/transaction-guards'\nimport classnames from 'classnames'\nimport css from './styles.module.css'\nimport CloseIcon from '@mui/icons-material/Close'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport SafeLogo from '@/public/images/logo-no-text.svg'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport useIsSafeOwner from '@/hooks/useIsSafeOwner'\nimport { useIsWalletProposer } from '@/hooks/useProposers'\n\nconst TxStatusWidget = ({\n  step,\n  txSummary,\n  handleClose,\n  isBatch = false,\n  isMessage = false,\n}: {\n  step: number\n  txSummary?: TransactionSummary\n  handleClose: () => void\n  isBatch?: boolean\n  isMessage?: boolean\n}) => {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const { nonceNeeded } = useContext(SafeTxContext)\n  const { threshold } = safe\n  const isSafeOwner = useIsSafeOwner()\n  const isProposer = useIsWalletProposer()\n  const isProposing = isProposer && !isSafeOwner\n\n  const { executionInfo = undefined } = txSummary || {}\n  const { confirmationsSubmitted = 0 } = isMultisigExecutionInfo(executionInfo) ? executionInfo : {}\n\n  const canConfirm = txSummary\n    ? isConfirmableBy(txSummary, wallet?.address || '')\n    : safe.threshold === 1 && !isProposing\n\n  const canSign = txSummary ? isSignableBy(txSummary, wallet?.address || '') : !isProposing\n\n  return (\n    <Paper>\n      <div className={css.header}>\n        <Typography fontWeight=\"700\" display=\"flex\" alignItems=\"center\" gap={1}>\n          <SafeLogo width={16} height={16} className={css.logo} />\n          {isMessage ? 'Message' : 'Transaction'} status\n        </Typography>\n\n        <IconButton className={css.close} aria-label=\"close\" onClick={handleClose} size=\"small\">\n          <CloseIcon />\n        </IconButton>\n      </div>\n\n      <Divider />\n\n      <div className={css.content}>\n        <List className={css.status}>\n          <ListItem>\n            <ListItemIcon>\n              <CreatedIcon />\n            </ListItemIcon>\n\n            <ListItemText primaryTypographyProps={{ fontWeight: 700 }}>\n              {isBatch ? 'Queue transactions' : 'Create'}\n            </ListItemText>\n          </ListItem>\n\n          <ListItem className={classnames({ [css.incomplete]: !canConfirm && !isBatch })}>\n            <ListItemIcon>\n              <SignedIcon />\n            </ListItemIcon>\n\n            <ListItemText primaryTypographyProps={{ fontWeight: 700 }}>\n              {isBatch ? (\n                'Create batch'\n              ) : !nonceNeeded ? (\n                'Confirmed'\n              ) : isMessage ? (\n                'Collect signatures'\n              ) : (\n                <>\n                  Confirmed ({confirmationsSubmitted} of {threshold})\n                  {canSign && (\n                    <Typography variant=\"body2\" component=\"span\" className={css.badge}>\n                      +1\n                    </Typography>\n                  )}\n                </>\n              )}\n            </ListItemText>\n          </ListItem>\n\n          <ListItem className={classnames({ [css.incomplete]: step < 2 })}>\n            <ListItemIcon>\n              <SignedIcon />\n            </ListItemIcon>\n\n            <ListItemText primaryTypographyProps={{ fontWeight: 700 }}>{isMessage ? 'Done' : 'Execute'}</ListItemText>\n          </ListItem>\n        </List>\n      </div>\n    </Paper>\n  )\n}\n\nexport default TxStatusWidget\n","import { TxSimulationMessage } from './tenderly'\n\nconst SecurityWarnings = () => (\n  <>\n    <TxSimulationMessage />\n  </>\n)\n\nexport default SecurityWarnings\n","import useSafeInfo from '@/hooks/useSafeInfo'\nimport { type ComponentType, type ReactElement, type ReactNode, useContext, useEffect, useState } from 'react'\nimport { Box, Container, Grid, Typography, Button, Paper, SvgIcon, IconButton, useMediaQuery } from '@mui/material'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'\nimport { useTheme } from '@mui/material/styles'\nimport type { TransactionSummary } from '@safe-global/safe-gateway-typescript-sdk'\nimport classnames from 'classnames'\nimport { ProgressBar } from '@/components/common/ProgressBar'\nimport SafeTxProvider, { SafeTxContext } from '../../SafeTxProvider'\nimport { TxInfoProvider } from '@/components/tx-flow/TxInfoProvider'\nimport TxNonce from '../TxNonce'\nimport TxStatusWidget from '../TxStatusWidget'\nimport css from './styles.module.css'\nimport SafeLogo from '@/public/images/logo-no-text.svg'\nimport { TxSecurityProvider } from '@/components/tx/security/shared/TxSecurityContext'\nimport ChainIndicator from '@/components/common/ChainIndicator'\nimport SecurityWarnings from '@/components/tx/security/SecurityWarnings'\n\nconst TxLayoutHeader = ({\n  hideNonce,\n  icon,\n  subtitle,\n}: {\n  hideNonce: TxLayoutProps['hideNonce']\n  icon: TxLayoutProps['icon']\n  subtitle: TxLayoutProps['subtitle']\n}) => {\n  const { safe } = useSafeInfo()\n  const { nonceNeeded } = useContext(SafeTxContext)\n\n  if (hideNonce && !icon && !subtitle) return null\n\n  return (\n    <Box className={css.headerInner}>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        {icon && (\n          <div className={css.icon}>\n            <SvgIcon component={icon} inheritViewBox />\n          </div>\n        )}\n\n        <Typography\n          variant=\"h4\"\n          component=\"div\"\n          sx={{\n            fontWeight: 'bold',\n          }}\n        >\n          {subtitle}\n        </Typography>\n      </Box>\n      {!hideNonce && safe.deployed && nonceNeeded && <TxNonce />}\n    </Box>\n  )\n}\n\ntype TxLayoutProps = {\n  title: ReactNode\n  children: ReactNode\n  subtitle?: ReactNode\n  icon?: ComponentType\n  step?: number\n  txSummary?: TransactionSummary\n  onBack?: () => void\n  hideNonce?: boolean\n  hideProgress?: boolean\n  isBatch?: boolean\n  isReplacement?: boolean\n  isMessage?: boolean\n}\n\nconst TxLayout = ({\n  title,\n  subtitle,\n  icon,\n  children,\n  step = 0,\n  txSummary,\n  onBack,\n  hideNonce = false,\n  hideProgress = false,\n  isBatch = false,\n  isReplacement = false,\n  isMessage = false,\n}: TxLayoutProps): ReactElement => {\n  const [statusVisible, setStatusVisible] = useState<boolean>(true)\n\n  const theme = useTheme()\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const isDesktop = useMediaQuery(theme.breakpoints.down('lg'))\n\n  const steps = Array.isArray(children) ? children : [children]\n  const progress = Math.round(((step + 1) / steps.length) * 100)\n\n  useEffect(() => {\n    setStatusVisible(!isSmallScreen)\n  }, [isSmallScreen])\n\n  const toggleStatus = () => {\n    setStatusVisible((prev) => !prev)\n  }\n\n  return (\n    <SafeTxProvider>\n      <TxInfoProvider>\n        <TxSecurityProvider>\n          <>\n            {/* Header status button */}\n            {!isReplacement && (\n              <IconButton\n                className={css.statusButton}\n                aria-label=\"Transaction status\"\n                size=\"large\"\n                onClick={toggleStatus}\n              >\n                <SafeLogo width={16} height={16} />\n              </IconButton>\n            )}\n\n            <Container className={css.container}>\n              <Grid\n                container\n                sx={{\n                  gap: 3,\n                  justifyContent: 'center',\n                }}\n              >\n                {/* Main content */}\n                <Grid item xs={12} md={7}>\n                  <div className={css.titleWrapper}>\n                    <Typography\n                      data-testid=\"modal-title\"\n                      variant=\"h3\"\n                      component=\"div\"\n                      className={css.title}\n                      sx={{\n                        fontWeight: '700',\n                      }}\n                    >\n                      {title}\n                    </Typography>\n\n                    <ChainIndicator inline />\n                  </div>\n\n                  <Paper data-testid=\"modal-header\" className={css.header}>\n                    {!hideProgress && (\n                      <Box className={css.progressBar}>\n                        <ProgressBar value={progress} />\n                      </Box>\n                    )}\n\n                    <TxLayoutHeader subtitle={subtitle} icon={icon} hideNonce={hideNonce} />\n                  </Paper>\n\n                  <div className={css.step}>\n                    {steps[step]}\n\n                    {onBack && step > 0 && (\n                      <Button\n                        data-testid=\"modal-back-btn\"\n                        variant={isDesktop ? 'text' : 'outlined'}\n                        onClick={onBack}\n                        className={css.backButton}\n                        startIcon={<ArrowBackIcon fontSize=\"small\" />}\n                      >\n                        Back\n                      </Button>\n                    )}\n                  </div>\n                </Grid>\n\n                {/* Sidebar */}\n                {!isReplacement && (\n                  <Grid item xs={12} md={4} className={classnames(css.widget, { [css.active]: statusVisible })}>\n                    {statusVisible && (\n                      <TxStatusWidget\n                        step={step}\n                        txSummary={txSummary}\n                        handleClose={() => setStatusVisible(false)}\n                        isBatch={isBatch}\n                        isMessage={isMessage}\n                      />\n                    )}\n\n                    <Box className={css.sticky}>\n                      <SecurityWarnings />\n                    </Box>\n                  </Grid>\n                )}\n              </Grid>\n            </Container>\n          </>\n        </TxSecurityProvider>\n      </TxInfoProvider>\n    </SafeTxProvider>\n  )\n}\n\nexport default TxLayout\n","import { isEIP712TypedData } from '@/utils/safe-messages'\nimport { normalizeTypedData } from '@/utils/web3'\nimport { type SafeTransaction } from '@safe-global/safe-core-sdk-types'\nimport { generateTypedData } from '@safe-global/protocol-kit/dist/src/utils/eip-712'\nimport type { EIP712TypedData } from '@safe-global/safe-gateway-typescript-sdk'\nimport { type SecurityResponse, type SecurityModule, SecuritySeverity } from '../types'\nimport type { AssetDiff, TransactionScanResponse } from './types'\nimport { BLOCKAID_API, BLOCKAID_CLIENT_ID } from '@/config/constants'\nimport { numberToHex } from '@/utils/hex'\n\n/** @see https://docs.blockaid.io/docs/supported-chains */\n\nconst blockaidSeverityMap: Record<string, SecuritySeverity> = {\n  Malicious: SecuritySeverity.HIGH,\n  Warning: SecuritySeverity.MEDIUM,\n  Benign: SecuritySeverity.NONE,\n  Info: SecuritySeverity.NONE,\n}\n\nexport type BlockaidModuleRequest = {\n  chainId: number\n  safeAddress: string\n  walletAddress: string\n  data: SafeTransaction | EIP712TypedData\n  threshold: number\n  origin?: string\n}\n\nexport type BlockaidModuleResponse = {\n  description?: string\n  classification?: string\n  reason?: string\n  issues: {\n    severity: SecuritySeverity\n    description: string\n  }[]\n  balanceChange: AssetDiff[]\n  error: Error | undefined\n}\n\ntype BlockaidPayload = {\n  chain: string\n  account_address: string\n  metadata:\n    | {\n        domain: string\n      }\n    | {\n        non_dapp: true\n      }\n  data: {\n    method: 'eth_signTypedData_v4'\n    params: [string, string]\n  }\n  options: ['simulation', 'validation']\n}\n\nexport class BlockaidModule implements SecurityModule<BlockaidModuleRequest, BlockaidModuleResponse> {\n  static prepareMessage(request: BlockaidModuleRequest): string {\n    const { data, safeAddress, chainId } = request\n    if (isEIP712TypedData(data)) {\n      const normalizedMsg = normalizeTypedData(data)\n      return JSON.stringify(normalizedMsg)\n    } else {\n      return JSON.stringify(\n        generateTypedData({\n          safeAddress,\n          safeVersion: '1.3.0', // TODO: pass to module, taking into account that lower Safe versions don't have chainId in payload\n          chainId: BigInt(chainId),\n          data: {\n            ...data.data,\n            safeTxGas: data.data.safeTxGas,\n            baseGas: data.data.baseGas,\n            gasPrice: data.data.gasPrice,\n          },\n        }),\n      )\n    }\n  }\n  async scanTransaction(request: BlockaidModuleRequest): Promise<SecurityResponse<BlockaidModuleResponse>> {\n    if (!BLOCKAID_CLIENT_ID) {\n      throw new Error('Security check CLIENT_ID not configured')\n    }\n\n    const { chainId, safeAddress } = request\n    const message = BlockaidModule.prepareMessage(request)\n\n    const payload: BlockaidPayload = {\n      chain: numberToHex(chainId),\n      account_address: safeAddress,\n      data: {\n        method: 'eth_signTypedData_v4',\n        params: [safeAddress, message],\n      },\n      options: ['simulation', 'validation'],\n      metadata: request.origin\n        ? {\n            domain: request.origin,\n          }\n        : {\n            non_dapp: true,\n          },\n    }\n    const res = await fetch(`${BLOCKAID_API}/v0/evm/json-rpc/scan`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json',\n        'X-CLIENT-ID': BLOCKAID_CLIENT_ID,\n      },\n      body: JSON.stringify(payload),\n    })\n\n    if (!res.ok) {\n      throw new Error('Blockaid scan failed', await res.json())\n    }\n\n    const result = (await res.json()) as TransactionScanResponse\n\n    const issues = (result.validation?.features ?? [])\n      .filter((feature) => feature.type === 'Malicious' || feature.type === 'Warning')\n      .map((feature) => ({\n        severity: blockaidSeverityMap[feature.type],\n        description: feature.description,\n      }))\n\n    const simulation = result.simulation\n    let balanceChange: AssetDiff[] = []\n    let error: Error | undefined = undefined\n    if (simulation?.status === 'Success') {\n      balanceChange = simulation.assets_diffs[safeAddress]\n    } else if (simulation?.status === 'Error') {\n      error = new Error('Simulation failed')\n    }\n\n    // Sometimes the validation is missing\n    if (result.validation === undefined) {\n      error = new Error('Validation result missing')\n    }\n\n    return {\n      severity: result.validation?.result_type\n        ? blockaidSeverityMap[result.validation.result_type]\n        : (SecuritySeverity.NONE ?? SecuritySeverity.NONE),\n      payload: {\n        description: result.validation?.description,\n        classification: result.validation?.classification,\n        reason: result.validation?.reason,\n        issues,\n        balanceChange,\n        error,\n      },\n    }\n  }\n}\n","import useAsync, { type AsyncResult } from '@/hooks/useAsync'\nimport { useHasFeature } from '@/hooks/useChains'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { useSigner } from '@/hooks/wallets/useWallet'\nimport { MODALS_EVENTS, trackEvent } from '@/services/analytics'\nimport type { SecurityResponse } from '@/services/security/modules/types'\nimport { FEATURES } from '@/utils/chains'\nimport type { SafeTransaction } from '@safe-global/safe-core-sdk-types'\nimport { useEffect, useMemo } from 'react'\n\nimport type { EIP712TypedData } from '@safe-global/safe-gateway-typescript-sdk'\nimport { BlockaidModule, type BlockaidModuleResponse } from '@/services/security/modules/BlockaidModule'\n\nconst BlockaidModuleInstance = new BlockaidModule()\n\nconst DEFAULT_ERROR_MESSAGE = 'Unavailable'\n\nexport const useBlockaid = (\n  data: SafeTransaction | EIP712TypedData | undefined,\n  origin?: string,\n): AsyncResult<SecurityResponse<BlockaidModuleResponse>> => {\n  const { safe, safeAddress } = useSafeInfo()\n  const signer = useSigner()\n  const isFeatureEnabled = useHasFeature(FEATURES.RISK_MITIGATION)\n\n  const [blockaidPayload, blockaidErrors, blockaidLoading] = useAsync<SecurityResponse<BlockaidModuleResponse>>(\n    () => {\n      if (!isFeatureEnabled || !data || !signer?.address) {\n        return\n      }\n\n      return BlockaidModuleInstance.scanTransaction({\n        chainId: Number(safe.chainId),\n        data,\n        safeAddress,\n        walletAddress: signer.address,\n        threshold: safe.threshold,\n        origin,\n      })\n    },\n    [safe.chainId, safe.threshold, safeAddress, data, signer?.address, isFeatureEnabled, origin],\n    false,\n  )\n\n  const loading = blockaidLoading\n\n  useEffect(() => {\n    if (!loading && blockaidPayload) {\n      trackEvent({ ...MODALS_EVENTS.BLOCKAID_RESULT, label: blockaidPayload.severity })\n    }\n  }, [loading, blockaidPayload])\n\n  const errorMsg = useMemo(\n    () => (blockaidErrors ? new Error(DEFAULT_ERROR_MESSAGE) : blockaidPayload?.payload?.error),\n\n    [blockaidErrors, blockaidPayload],\n  )\n  return [blockaidPayload, errorMsg, loading]\n}\n","import { SecuritySeverity } from '@/services/security/modules/types'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport {\n  createContext,\n  type Dispatch,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n  type ReactElement,\n} from 'react'\nimport type { BlockaidModuleResponse } from '@/services/security/modules/BlockaidModule'\nimport { useBlockaid } from '../blockaid/useBlockaid'\n\nexport const defaultSecurityContextValues = {\n  blockaidResponse: {\n    warnings: [],\n    description: undefined,\n    classification: undefined,\n    reason: undefined,\n    balanceChange: undefined,\n    severity: SecuritySeverity.NONE,\n    isLoading: false,\n    error: undefined,\n  },\n  needsRiskConfirmation: false,\n  isRiskConfirmed: false,\n  setIsRiskConfirmed: () => {},\n  isRiskIgnored: false,\n  setIsRiskIgnored: () => {},\n}\n\nexport type TxSecurityContextProps = {\n  blockaidResponse:\n    | {\n        description: BlockaidModuleResponse['description']\n        classification: BlockaidModuleResponse['classification']\n        reason: BlockaidModuleResponse['reason']\n        warnings: NonNullable<BlockaidModuleResponse['issues']>\n        balanceChange: BlockaidModuleResponse['balanceChange'] | undefined\n        severity: SecuritySeverity | undefined\n        isLoading: boolean\n        error: Error | undefined\n      }\n    | undefined\n  needsRiskConfirmation: boolean\n  isRiskConfirmed: boolean\n  setIsRiskConfirmed: Dispatch<SetStateAction<boolean>>\n  isRiskIgnored: boolean\n  setIsRiskIgnored: Dispatch<SetStateAction<boolean>>\n}\n\nexport const TxSecurityContext = createContext<TxSecurityContextProps>(defaultSecurityContextValues)\n\nexport const TxSecurityProvider = ({ children }: { children: ReactElement }) => {\n  const { safeTx, safeMessage, txOrigin } = useContext(SafeTxContext)\n  const [blockaidResponse, blockaidError, blockaidLoading] = useBlockaid(safeTx ?? safeMessage, txOrigin)\n\n  const [isRiskConfirmed, setIsRiskConfirmed] = useState(false)\n  const [isRiskIgnored, setIsRiskIgnored] = useState(false)\n\n  const providedValue = useMemo(\n    () => ({\n      blockaidResponse: {\n        description: blockaidResponse?.payload?.description,\n        reason: blockaidResponse?.payload?.reason,\n        classification: blockaidResponse?.payload?.classification,\n        severity: blockaidResponse?.severity,\n        warnings: blockaidResponse?.payload?.issues || [],\n        balanceChange: blockaidResponse?.payload?.balanceChange,\n        error: blockaidError,\n        isLoading: blockaidLoading,\n      },\n      needsRiskConfirmation: !!blockaidResponse && blockaidResponse.severity >= SecuritySeverity.HIGH,\n      isRiskConfirmed,\n      setIsRiskConfirmed,\n      isRiskIgnored: isRiskIgnored && !isRiskConfirmed,\n      setIsRiskIgnored,\n    }),\n    [blockaidError, blockaidLoading, blockaidResponse, isRiskConfirmed, isRiskIgnored],\n  )\n\n  return <TxSecurityContext.Provider value={providedValue}>{children}</TxSecurityContext.Provider>\n}\n","import useIsSafeOwner from '@/hooks/useIsSafeOwner'\nimport { Alert, Button, Paper, SvgIcon, Tooltip, Typography } from '@mui/material'\nimport { useContext, useEffect } from 'react'\nimport type { ReactElement } from 'react'\n\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { useSigner } from '@/hooks/wallets/useWallet'\nimport CheckIcon from '@/public/images/common/check.svg'\nimport CloseIcon from '@/public/images/common/close.svg'\nimport { useDarkMode } from '@/hooks/useDarkMode'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport ExternalLink from '@/components/common/ExternalLink'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport { isTxSimulationEnabled } from '@/components/tx/security/tenderly/utils'\nimport type { SimulationTxParams } from '@/components/tx/security/tenderly/utils'\n\nimport css from './styles.module.css'\nimport sharedCss from '@/components/tx/security/shared/styles.module.css'\nimport { TxInfoContext } from '@/components/tx-flow/TxInfoProvider'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport Track from '@/components/common/Track'\nimport { MODALS_EVENTS } from '@/services/analytics'\n\nexport type TxSimulationProps = {\n  transactions?: SimulationTxParams['transactions']\n  gasLimit?: number\n  disabled: boolean\n  executionOwner?: string\n}\n\n// TODO: Investigate resetting on gasLimit change as we are not simulating with the gasLimit of the tx\n// otherwise remove all usage of gasLimit in simulation. Note: this was previously being done.\n// TODO: Test this component\nconst TxSimulationBlock = ({ transactions, disabled, gasLimit, executionOwner }: TxSimulationProps): ReactElement => {\n  const { safe } = useSafeInfo()\n  const signer = useSigner()\n  const isSafeOwner = useIsSafeOwner()\n  const isDarkMode = useDarkMode()\n  const { safeTx } = useContext(SafeTxContext)\n  const {\n    simulation: { simulateTransaction, resetSimulation },\n    status: { isFinished, isError, isSuccess, isCallTraceError, isLoading },\n  } = useContext(TxInfoContext)\n\n  const handleSimulation = async () => {\n    if (!signer) {\n      return\n    }\n\n    simulateTransaction({\n      safe,\n      // fall back to the first owner of the safe in case the transaction is created by a proposer\n      executionOwner: (executionOwner ?? isSafeOwner) ? signer.address : safe.owners[0].value,\n      transactions,\n      gasLimit,\n    } as SimulationTxParams)\n  }\n\n  // Reset simulation if safeTx changes\n  useEffect(() => {\n    resetSimulation()\n  }, [safeTx, resetSimulation])\n\n  return (\n    <Paper variant=\"outlined\" className={sharedCss.wrapper}>\n      <div className={css.wrapper}>\n        <Typography variant=\"body2\" fontWeight={700}>\n          Run a simulation\n          <Tooltip\n            title=\"This transaction can be simulated before execution to ensure that it will be succeed, generating a detailed report of the transaction execution.\"\n            arrow\n            placement=\"top\"\n          >\n            <span>\n              <SvgIcon\n                component={InfoIcon}\n                inheritViewBox\n                color=\"border\"\n                fontSize=\"small\"\n                sx={{\n                  verticalAlign: 'middle',\n                  ml: 0.5,\n                }}\n              />\n            </span>\n          </Tooltip>\n        </Typography>\n        <Typography variant=\"caption\" className={sharedCss.poweredBy}>\n          Powered by{' '}\n          <img\n            src={isDarkMode ? '/images/transactions/tenderly-light.svg' : '/images/transactions/tenderly-dark.svg'}\n            alt=\"Tenderly\"\n            width=\"65px\"\n            height=\"15px\"\n          />\n        </Typography>\n      </div>\n\n      <div className={sharedCss.result}>\n        {isLoading ? (\n          <CircularProgress\n            size={22}\n            sx={{\n              color: ({ palette }) => palette.text.secondary,\n            }}\n          />\n        ) : isFinished ? (\n          !isSuccess || isError || isCallTraceError ? (\n            <Typography\n              variant=\"body2\"\n              className={sharedCss.result}\n              sx={{\n                color: 'error.main',\n              }}\n            >\n              <SvgIcon component={CloseIcon} inheritViewBox fontSize=\"small\" sx={{ verticalAlign: 'middle', mr: 1 }} />\n              Error\n            </Typography>\n          ) : (\n            <Typography\n              data-testid=\"simulation-success-msg\"\n              variant=\"body2\"\n              className={sharedCss.result}\n              sx={{\n                color: 'success.main',\n              }}\n            >\n              <SvgIcon component={CheckIcon} inheritViewBox fontSize=\"small\" sx={{ verticalAlign: 'middle', mr: 1 }} />\n              Success\n            </Typography>\n          )\n        ) : (\n          <Track {...MODALS_EVENTS.SIMULATE_TX}>\n            <Button\n              data-testid=\"simulate-btn\"\n              variant=\"outlined\"\n              size=\"small\"\n              className={css.simulate}\n              onClick={handleSimulation}\n              disabled={!transactions || disabled}\n            >\n              Simulate\n            </Button>\n          </Track>\n        )}\n      </div>\n    </Paper>\n  )\n}\n\nexport const TxSimulation = (props: TxSimulationProps): ReactElement | null => {\n  const chain = useCurrentChain()\n\n  if (!chain || !isTxSimulationEnabled(chain)) {\n    return null\n  }\n\n  return <TxSimulationBlock {...props} />\n}\n\n// TODO: Test this component\nexport const TxSimulationMessage = () => {\n  const {\n    simulation: { simulationLink, simulation, requestError },\n    status: { isError, isSuccess, isCallTraceError, isFinished },\n  } = useContext(TxInfoContext)\n\n  if (!isFinished) {\n    return null\n  }\n\n  if (!isSuccess || isError || isCallTraceError) {\n    return (\n      <Alert severity=\"error\" sx={{ border: 'unset' }}>\n        <Typography variant=\"body1\" fontWeight={700}>\n          Simulation failed\n        </Typography>\n        {requestError ? (\n          <Typography color=\"error\" variant=\"body2\">\n            An unexpected error occurred during simulation: <b>{requestError}</b>.\n          </Typography>\n        ) : (\n          <Typography variant=\"body2\">\n            {isCallTraceError ? (\n              <>The transaction failed during the simulation.</>\n            ) : (\n              <>\n                The transaction failed during the simulation throwing error{' '}\n                <b>{simulation?.transaction.error_message}</b> in the contract at{' '}\n                <b>{simulation?.transaction.error_info?.address}</b>.\n              </>\n            )}{' '}\n            Full simulation report is available <ExternalLink href={simulationLink}>on Tenderly</ExternalLink>.\n          </Typography>\n        )}\n      </Alert>\n    )\n  }\n\n  return (\n    <Alert severity=\"info\" sx={{ border: 'unset' }}>\n      <Typography variant=\"body2\" fontWeight={700}>\n        Simulation successful\n      </Typography>\n      Full simulation report is available <ExternalLink href={simulationLink}>on Tenderly</ExternalLink>.\n    </Alert>\n  )\n}\n","import { generatePreValidatedSignature } from '@safe-global/protocol-kit/dist/src/utils/signatures'\nimport EthSafeTransaction from '@safe-global/protocol-kit/dist/src/utils/transactions/SafeTransaction'\nimport { encodeMultiSendData } from '@safe-global/protocol-kit/dist/src/utils/transactions/utils'\nimport { type SafeInfo, type ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { MetaTransactionData, SafeTransaction } from '@safe-global/safe-core-sdk-types'\n\nimport {\n  getReadOnlyMultiSendCallOnlyContract,\n  getReadOnlyCurrentGnosisSafeContract,\n} from '@/services/contracts/safeContracts'\nimport { TENDERLY_SIMULATE_ENDPOINT_URL, TENDERLY_ORG_NAME, TENDERLY_PROJECT_NAME } from '@/config/constants'\nimport { FEATURES, hasFeature } from '@/utils/chains'\nimport type { StateObject, TenderlySimulatePayload, TenderlySimulation } from '@/components/tx/security/tenderly/types'\nimport { getWeb3ReadOnly } from '@/hooks/wallets/web3'\nimport { toBeHex } from 'ethers'\nimport type { EnvState } from '@/store/settingsSlice'\n\nexport const isTxSimulationEnabled = (chain?: ChainInfo): boolean => {\n  if (!chain) {\n    return false\n  }\n\n  const isSimulationEnvSet =\n    Boolean(TENDERLY_SIMULATE_ENDPOINT_URL) && Boolean(TENDERLY_ORG_NAME) && Boolean(TENDERLY_PROJECT_NAME)\n\n  return isSimulationEnvSet && hasFeature(chain, FEATURES.TX_SIMULATION)\n}\n\nexport const getSimulation = async (\n  tx: TenderlySimulatePayload,\n  customTenderly: EnvState['tenderly'] | undefined,\n): Promise<TenderlySimulation> => {\n  const requestObject: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(tx),\n  }\n\n  if (customTenderly?.accessToken) {\n    requestObject.headers = {\n      'content-type': 'application/JSON',\n      'X-Access-Key': customTenderly.accessToken,\n    }\n  }\n\n  const data = await fetch(\n    customTenderly?.url ? customTenderly.url : TENDERLY_SIMULATE_ENDPOINT_URL,\n    requestObject,\n  ).then((res) => {\n    if (res.ok) {\n      return res.json()\n    }\n    return res.json().then((data) => {\n      throw new Error(`${res.status} - ${res.statusText}: ${data?.error?.message}`)\n    })\n  })\n\n  return data as TenderlySimulation\n}\n\nexport const getSimulationLink = (simulationId: string): string => {\n  return `https://dashboard.tenderly.co/public/${TENDERLY_ORG_NAME}/${TENDERLY_PROJECT_NAME}/simulator/${simulationId}`\n}\n\ntype SingleTransactionSimulationParams = {\n  safe: SafeInfo\n  executionOwner: string\n  transactions: SafeTransaction\n  gasLimit?: number\n}\n\ntype MultiSendTransactionSimulationParams = {\n  safe: SafeInfo\n  executionOwner: string\n  transactions: MetaTransactionData[]\n  gasLimit?: number\n}\n\nexport type SimulationTxParams = SingleTransactionSimulationParams | MultiSendTransactionSimulationParams\n\nexport const _getSingleTransactionPayload = async (\n  params: SingleTransactionSimulationParams,\n): Promise<Pick<TenderlySimulatePayload, 'to' | 'input'>> => {\n  // If a transaction is executable we simulate with the proposed/selected gasLimit and the actual signatures\n  let transaction = params.transactions\n  const hasOwnerSignature = transaction.signatures.has(params.executionOwner)\n  // If the owner's sig is missing and the tx threshold is not reached we add the owner's preValidated signature\n  const needsOwnerSignature = !hasOwnerSignature && transaction.signatures.size < params.safe.threshold\n  if (needsOwnerSignature) {\n    const simulatedTransaction = new EthSafeTransaction(transaction.data)\n\n    transaction.signatures.forEach((signature) => {\n      simulatedTransaction.addSignature(signature)\n    })\n    simulatedTransaction.addSignature(generatePreValidatedSignature(params.executionOwner))\n\n    transaction = simulatedTransaction\n  }\n\n  const readOnlySafeContract = await getReadOnlyCurrentGnosisSafeContract(params.safe)\n\n  const input = readOnlySafeContract.encode('execTransaction', [\n    transaction.data.to,\n    transaction.data.value,\n    transaction.data.data,\n    transaction.data.operation,\n    transaction.data.safeTxGas,\n    transaction.data.baseGas,\n    transaction.data.gasPrice,\n    transaction.data.gasToken,\n    transaction.data.refundReceiver,\n    transaction.encodedSignatures(),\n  ])\n\n  return {\n    to: await readOnlySafeContract.getAddress(),\n    input,\n  }\n}\n\nexport const _getMultiSendCallOnlyPayload = async (\n  params: MultiSendTransactionSimulationParams,\n): Promise<Pick<TenderlySimulatePayload, 'to' | 'input'>> => {\n  const data = encodeMultiSendData(params.transactions)\n  const readOnlyMultiSendContract = await getReadOnlyMultiSendCallOnlyContract(params.safe.version)\n\n  return {\n    to: await readOnlyMultiSendContract.getAddress(),\n    input: readOnlyMultiSendContract.encode('multiSend', [data]),\n  }\n}\n\nexport const _getStateOverride = (\n  address: string,\n  balance?: string,\n  code?: string,\n  storage?: Record<string, string>,\n): Record<string, StateObject> => {\n  return {\n    [address]: {\n      balance,\n      code,\n      storage,\n    },\n  }\n}\n\nconst isSingleTransactionSimulation = (params: SimulationTxParams): params is SingleTransactionSimulationParams => {\n  return !Array.isArray(params.transactions)\n}\n\n/**\n * @returns true for single MultiSig transactions if the provided signatures plus the current owner's signature (if missing)\n * do not reach the safe's threshold.\n */\nconst isOverwriteThreshold = (params: SimulationTxParams) => {\n  if (!isSingleTransactionSimulation(params)) {\n    return false\n  }\n  const tx = params.transactions\n  const hasOwnerSig = tx.signatures.has(params.executionOwner)\n  const effectiveSigs = tx.signatures.size + (hasOwnerSig ? 0 : 1)\n  return params.safe.threshold > effectiveSigs\n}\n\nconst getNonceOverwrite = (params: SimulationTxParams): number | undefined => {\n  if (!isSingleTransactionSimulation(params)) {\n    return\n  }\n  const txNonce = params.transactions.data.nonce\n  const safeNonce = params.safe.nonce\n  if (txNonce > safeNonce) {\n    return txNonce\n  }\n}\n\n/* We need to overwrite the threshold stored in smart contract storage to 1\n  to do a proper simulation that takes transaction guards into account.\n  The threshold is stored in storage slot 4 and uses full 32 bytes slot.\n  Safe storage layout can be found here:\n  https://github.com/gnosis/safe-contracts/blob/main/contracts/libraries/GnosisSafeStorage.sol */\nexport const THRESHOLD_STORAGE_POSITION = toBeHex('0x4', 32)\nexport const THRESHOLD_OVERWRITE = toBeHex('0x1', 32)\n/* We need to overwrite the nonce if we simulate a (partially) signed transaction which is not at the top position of the tx queue.\n  The nonce can be found in storage slot 5 and uses a full 32 bytes slot. */\nexport const NONCE_STORAGE_POSITION = toBeHex('0x5', 32)\n\nconst getStateOverwrites = (params: SimulationTxParams) => {\n  const nonceOverwrite = getNonceOverwrite(params)\n  const isThresholdOverwrite = isOverwriteThreshold(params)\n\n  const storageOverwrites: Record<string, string> = {} as Record<string, string>\n\n  if (isThresholdOverwrite) {\n    storageOverwrites[THRESHOLD_STORAGE_POSITION] = THRESHOLD_OVERWRITE\n  }\n  if (nonceOverwrite !== undefined) {\n    storageOverwrites[NONCE_STORAGE_POSITION] = toBeHex('0x' + BigInt(nonceOverwrite).toString(16), 32)\n  }\n\n  return storageOverwrites\n}\n\nconst getLatestBlockGasLimit = async (): Promise<number> => {\n  const web3ReadOnly = getWeb3ReadOnly()\n  const latestBlock = await web3ReadOnly?.getBlock('latest')\n  if (!latestBlock) {\n    throw Error('Could not determine block gas limit')\n  }\n  return Number(latestBlock.gasLimit)\n}\n\nexport const getSimulationPayload = async (params: SimulationTxParams): Promise<TenderlySimulatePayload> => {\n  const gasLimit = params.gasLimit ?? (await getLatestBlockGasLimit())\n\n  const payload = isSingleTransactionSimulation(params)\n    ? await _getSingleTransactionPayload(params)\n    : await _getMultiSendCallOnlyPayload(params)\n\n  const stateOverwrites = getStateOverwrites(params)\n  const stateOverwritesLength = Object.keys(stateOverwrites).length\n\n  return {\n    ...payload,\n    network_id: params.safe.chainId,\n    from: params.executionOwner,\n    gas: gasLimit,\n    // With gas price 0 account don't need token for gas\n    gas_price: '0',\n    state_objects:\n      stateOverwritesLength > 0\n        ? _getStateOverride(params.safe.address.value, undefined, undefined, stateOverwrites)\n        : undefined,\n    save: true,\n    save_if_fails: true,\n  }\n}\n","export const enum SecuritySeverity {\n  NONE,\n  LOW,\n  MEDIUM,\n  HIGH,\n  CRITICAL,\n}\n\nexport type SecurityResponse<Res> =\n  | {\n      severity: SecuritySeverity\n      payload: Res\n    }\n  | {\n      severity: SecuritySeverity.NONE\n      payload?: never\n    }\n\nexport interface SecurityModule<Req, Res> {\n  scanTransaction(request: Req): Promise<SecurityResponse<Res>> | SecurityResponse<Res>\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBar\":\"styles_progressBar__BJPY4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pmXub\",\"header\":\"styles_header__BYVn_\",\"headerInner\":\"styles_headerInner__cl4mF\",\"step\":\"styles_step__io0n9\",\"backButton\":\"styles_backButton__qss5S\",\"icon\":\"styles_icon___R8Jt\",\"statusButton\":\"styles_statusButton__Xk7Ke\",\"sticky\":\"styles_sticky__RmdHx\",\"titleWrapper\":\"styles_titleWrapper___aHwm\",\"widget\":\"styles_widget__ArM0G\",\"active\":\"styles_active___mizo\",\"title\":\"styles_title__AfqGy\",\"progressBar\":\"styles_progressBar__4bT_8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popper\":\"styles_popper__iH9fU\",\"input\":\"styles_input__efeqR\",\"withAdornment\":\"styles_withAdornment__Lca7N\",\"adornment\":\"styles_adornment__pGkwZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__Rx8et\",\"content\":\"styles_content__P6bCm\",\"status\":\"styles_status__bYEMV\",\"incomplete\":\"styles_incomplete__q8e_i\",\"close\":\"styles_close__UtQ43\",\"badge\":\"styles_badge__lE1nC\",\"logo\":\"styles_logo__7varl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__5bV36\",\"poweredBy\":\"styles_poweredBy__1McoZ\",\"result\":\"styles_result__89PKm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulate\":\"styles_simulate__DIuYE\",\"wrapper\":\"styles_wrapper__S7Jws\"};","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nvar SvgCreated = function SvgCreated(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"illustration-background-fill\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M9 7H11C11.5523 7 12 7.44772 12 8C12 8.55228 11.5523 9 11 9H9V11C9 11.5523 8.55228 12 8 12C7.44772 12 7 11.5523 7 11V9H5C4.44772 9 4 8.55228 4 8C4 7.44772 4.44772 7 5 7H7V5C7 4.44772 7.44772 4 8 4C8.55228 4 9 4.44772 9 5V7Z\"\n  })));\n};\nexport default SvgCreated;","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nvar SvgSigned = function SvgSigned(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"illustration-background-fill\",\n    d: \"M7.68894 8.54156L6.18321 7.13278C5.77992 6.75545 5.14711 6.7765 4.76978 7.17979C4.39245 7.58308 4.4135 8.2159 4.8168 8.59322L7.0378 10.6712C7.4352 11.043 8.05698 11.0288 8.43694 10.6392L11.3049 7.69817C11.6905 7.30277 11.6826 6.66965 11.2872 6.28406C10.8918 5.89848 10.2587 5.90643 9.87307 6.30183L7.68894 8.54156Z\"\n  })));\n};\nexport default SvgSigned;"],"names":["createSvgIcon","_jsx","d","ProgressBar","LinearProgress","className","css","variant","color","props","FETCH_STATUS","SimpleTypeType","StorageLocation","SoltypeType","ABIType","useSimulation","simulation","setSimulation","useState","simulationRequestStatus","setSimulationRequestStatus","NOT_ASKED","requestError","setRequestError","undefined","tenderly","useAppSelector","selectTenderly","simulationLink","useMemo","getSimulationLink","id","resetSimulation","useCallback","simulateTransaction","params","LOADING","simulationPayload","getSimulationPayload","data","getSimulation","SUCCESS","error","console","asError","message","ERROR","_simulationRequestStatus","status","transaction","call_trace","filter","call","TxInfoContext","createContext","isLoading","isFinished","isSuccess","isCallTraceError","isError","children","getCallTraceErrors","length","Provider","value","_getUniqueQueuedTxs","page","txs","results","isTransactionListItem","map","item","uniqBy","isMultisigExecutionInfo","tx","executionInfo","nonce","useTxQueue","usePreviousNonces","CustomPopper","Popper","classNames","style","placement","NonceFormHeader","memo","NonceFormSubheader","ListSubheader","disableSticky","Typography","fontWeight","NonceFormOption","menuItemProps","addressBook","useAddressBook","transactions","useQueuedTxByNonce","Number","txLabel","latestTransactions","getLatestTransactions","txInfo","humanDescription","getTransactionType","text","MenuItem","b","getFieldMinWidth","Math","MAX_WIDTH","max","MIN_CHARS","createFilterOptions","TxNonceFormFieldNames","ErrorMessages","TxNonceForm","recommendedNonce","safeTx","setNonce","useContext","SafeTxContext","previousNonces","toString","safe","useSafeInfo","warning","setWarning","showRecommendedNonceButton","readOnly","isEditable","signatures","size","isRejectionTx","formMethods","useForm","defaultValues","mode","values","resetNonce","setValue","useEffect","MAX_NONCE_DIFFERENCE","Controller","name","control","rules","required","validate","newNonce","replace","MAX_SAFE_INTEGER","isInteger","render","field","fieldState","ml","Autocomplete","freeSolo","onChange","_","onInputChange","onBlur","options","getOptionLabel","option","filterOptions","filtered","shouldShow","includes","inputValue","isQueued","some","push","renderOption","isRecommendedNonce","isInitialPreviousNonce","key","rest","div","sx","pt","disableClearable","componentsProps","paper","elevation","renderInput","Tooltip","title","open","arrow","NumberField","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","RotateLeftIcon","fontSize","minWidth","PopperComponent","skeletonMinWidth","TxNonce","Box","data-testid","display","alignItems","gap","component","Skeleton","width","height","step","txSummary","TxStatusWidget","handleClose","isBatch","isMessage","wallet","useWallet","nonceNeeded","threshold","isSafeOwner","useIsSafeOwner","isProposing","isProposer","useIsWalletProposer","confirmationsSubmitted","canConfirm","isConfirmableBy","address","canSign","isSignableBy","Paper","SafeLogo","aria-label","CloseIcon","Divider","List","ListItem","ListItemIcon","CreatedIcon","ListItemText","primaryTypographyProps","classnames","SignedIcon","SecurityWarnings","TxSimulationMessage","TxLayoutHeader","hideNonce","icon","subtitle","SvgIcon","inheritViewBox","deployed","TxLayout","onBack","hideProgress","isReplacement","statusVisible","setStatusVisible","theme","useTheme","isSmallScreen","useMediaQuery","breakpoints","down","isDesktop","steps","Array","isArray","progress","round","SafeTxProvider","TxInfoProvider","TxSecurityProvider","toggleStatus","prev","Container","Grid","container","justifyContent","xs","md","ChainIndicator","inline","Button","startIcon","ArrowBackIcon","blockaidSeverityMap","Malicious","SecuritySeverity","HIGH","Warning","MEDIUM","Benign","NONE","Info","BlockaidModule","prepareMessage","request","safeAddress","chainId","isEIP712TypedData","JSON","stringify","normalizedMsg","normalizeTypedData","generateTypedData","safeVersion","BigInt","safeTxGas","baseGas","gasPrice","scanTransaction","result","BLOCKAID_CLIENT_ID","payload","chain","numberToHex","account_address","method","metadata","origin","domain","non_dapp","res","fetch","BLOCKAID_API","headers","accept","body","ok","json","issues","validation","features","feature","type","severity","description","balanceChange","assets_diffs","result_type","classification","reason","BlockaidModuleInstance","useBlockaid","signer","useSigner","isFeatureEnabled","useHasFeature","FEATURES","RISK_MITIGATION","blockaidPayload","blockaidErrors","blockaidLoading","useAsync","walletAddress","loading","trackEvent","MODALS_EVENTS","BLOCKAID_RESULT","label","errorMsg","DEFAULT_ERROR_MESSAGE","blockaidResponse","warnings","needsRiskConfirmation","isRiskConfirmed","setIsRiskConfirmed","isRiskIgnored","setIsRiskIgnored","defaultSecurityContextValues","safeMessage","txOrigin","blockaidError","providedValue","TxSecurityContext","TxSimulationBlock","disabled","gasLimit","executionOwner","isDarkMode","useDarkMode","handleSimulation","owners","sharedCss","span","InfoIcon","verticalAlign","img","src","alt","CircularProgress","palette","secondary","mr","CheckIcon","Track","SIMULATE_TX","TxSimulation","useCurrentChain","isTxSimulationEnabled","Alert","border","error_info","ExternalLink","href","Boolean","TENDERLY_SIMULATE_ENDPOINT_URL","TENDERLY_ORG_NAME","TENDERLY_PROJECT_NAME","hasFeature","TX_SIMULATION","customTenderly","requestObject","accessToken","url","then","statusText","simulationId","_getSingleTransactionPayload","has","simulatedTransaction","EthSafeTransaction","forEach","signature","addSignature","generatePreValidatedSignature","readOnlySafeContract","getReadOnlyCurrentGnosisSafeContract","input","encode","to","operation","gasToken","refundReceiver","encodedSignatures","getAddress","encodeMultiSendData","readOnlyMultiSendContract","getReadOnlyMultiSendCallOnlyContract","version","balance","code","storage","isSingleTransactionSimulation","isOverwriteThreshold","hasOwnerSig","effectiveSigs","getNonceOverwrite","txNonce","safeNonce","THRESHOLD_STORAGE_POSITION","toBeHex","NONCE_STORAGE_POSITION","nonceOverwrite","isThresholdOverwrite","storageOverwrites","THRESHOLD_OVERWRITE","getLatestBlockGasLimit","web3ReadOnly","getWeb3ReadOnly","latestBlock","getBlock","Error","_getMultiSendCallOnlyPayload","stateOverwrites","getStateOverwrites","stateOverwritesLength","Object","keys","network_id","from","gas","gas_price","state_objects","_getStateOverride","save","save_if_fails"],"sourceRoot":"","ignoreList":[0,1]}