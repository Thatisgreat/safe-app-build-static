{"version":3,"file":"static/chunks/9949.a8b999ae2e703330.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/AddressBookInput/index.tsx","webpack://_N_E/./src/components/tx-flow/common/constants.ts","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/AddOwner/ChooseOwner.tsx","webpack://_N_E/./src/components/tx-flow/flows/AddOwner/ReviewOwner.tsx","webpack://_N_E/./src/components/tx-flow/useTxStepper.tsx","webpack://_N_E/./src/components/common/AddressBookInput/styles.module.css"],"sourcesContent":["import { type ReactElement, useState, useMemo } from 'react'\nimport { Controller, useFormContext, useWatch } from 'react-hook-form'\nimport { SvgIcon, Typography } from '@mui/material'\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete'\nimport useAddressBook from '@/hooks/useAddressBook'\nimport AddressInput, { type AddressInputProps } from '../AddressInput'\nimport EthHashInfo from '../EthHashInfo'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport EntryDialog from '@/components/address-book/EntryDialog'\nimport css from './styles.module.css'\nimport inputCss from '@/styles/inputs.module.css'\nimport { isValidAddress } from '@/utils/validation'\nimport { sameAddress } from '@/utils/addresses'\n\nconst abFilterOptions = createFilterOptions({\n  stringify: (option: { label: string; name: string }) => option.name + ' ' + option.label,\n})\n\n/**\n *  Temporary component until revamped safe components are done\n */\nconst AddressBookInput = ({ name, canAdd, ...props }: AddressInputProps & { canAdd?: boolean }): ReactElement => {\n  const addressBook = useAddressBook()\n  const { setValue, control } = useFormContext()\n  const addressValue = useWatch({ name, control })\n  const [open, setOpen] = useState(false)\n  const [openAddressBook, setOpenAddressBook] = useState<boolean>(false)\n\n  const addressBookEntries = Object.entries(addressBook).map(([address, name]) => ({\n    label: address,\n    name,\n  }))\n\n  const hasVisibleOptions = useMemo(\n    () => !!addressBookEntries.filter((entry) => entry.label.includes(addressValue)).length,\n    [addressBookEntries, addressValue],\n  )\n\n  const isInAddressBook = useMemo(\n    () => addressBookEntries.some((entry) => sameAddress(entry.label, addressValue)),\n    [addressBookEntries, addressValue],\n  )\n\n  const customFilterOptions = (options: any, state: any) => {\n    // Don't show suggestions from the address book once a valid address has been entered.\n    if (isValidAddress(addressValue)) return []\n    return abFilterOptions(options, state)\n  }\n\n  const handleOpenAutocomplete = () => {\n    setOpen((value) => !value)\n  }\n\n  const onAddressBookClick = canAdd\n    ? () => {\n        setOpenAddressBook(true)\n      }\n    : undefined\n\n  return (\n    <>\n      <Controller\n        name={name}\n        control={control}\n        // eslint-disable-next-line\n        render={({ field: { ref, ...field } }) => (\n          <Autocomplete\n            {...field}\n            className={inputCss.input}\n            disableClearable\n            disabled={props.disabled}\n            readOnly={props.InputProps?.readOnly}\n            freeSolo\n            options={addressBookEntries}\n            onChange={(_, value) => (typeof value === 'string' ? field.onChange(value) : field.onChange(value.label))}\n            onInputChange={(_, value) => setValue(name, value)}\n            filterOptions={customFilterOptions}\n            componentsProps={{\n              paper: {\n                elevation: 2,\n              },\n            }}\n            renderOption={(props, option) => {\n              const { key, ...rest } = props\n              return (\n                <Typography data-testid=\"address-item\" component=\"li\" variant=\"body2\" {...rest} key={key}>\n                  <EthHashInfo address={option.label} name={option.name} shortAddress={false} copyAddress={false} />\n                </Typography>\n              )\n            }}\n            renderInput={(params) => (\n              <AddressInput\n                data-testid=\"address-item\"\n                {...params}\n                {...props}\n                focused={props.focused || !addressValue}\n                name={name}\n                onOpenListClick={hasVisibleOptions ? handleOpenAutocomplete : undefined}\n                isAutocompleteOpen={open}\n                onAddressBookClick={canAdd && !isInAddressBook ? onAddressBookClick : undefined}\n              />\n            )}\n          />\n        )}\n      />\n\n      {canAdd && !isInAddressBook ? (\n        <Typography variant=\"body2\" className={css.unknownAddress}>\n          <SvgIcon component={InfoIcon} fontSize=\"small\" />\n          <span>\n            This is an unknown address. You can{' '}\n            <a role=\"button\" onClick={onAddressBookClick}>\n              add it to your address book\n            </a>\n            .\n          </span>\n        </Typography>\n      ) : null}\n\n      {openAddressBook && (\n        <EntryDialog\n          handleClose={() => setOpenAddressBook(false)}\n          defaultValues={{ name: '', address: addressValue }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default AddressBookInput\n","export const TOOLTIP_TITLES = {\n  THRESHOLD:\n    'The threshold of a Safe Account specifies how many signers need to confirm a Safe Account transaction before it can be executed.',\n  REVIEW_WINDOW:\n    'A period that begins after a recovery is submitted on-chain, during which the Safe Account signers can review the proposal and cancel it before it is executable.',\n  PROPOSAL_EXPIRY: 'A period after which the recovery proposal will expire and can no longer be executed.',\n} as const\n","export * from \"/Users/liuxiaolin/Documents/other/safe-wallet-monorepo/apps/web/src/components/common/Mui/index.tsx\"","import {\n  Box,\n  Typography,\n  FormControl,\n  InputAdornment,\n  CircularProgress,\n  Button,\n  CardActions,\n  Divider,\n  Grid,\n  TextField,\n  MenuItem,\n  SvgIcon,\n  Tooltip,\n} from '@mui/material'\nimport { useForm, FormProvider, Controller } from 'react-hook-form'\n\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport NameInput from '@/components/common/NameInput'\nimport { useAddressResolver } from '@/hooks/useAddressResolver'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { uniqueAddress, addressIsNotCurrentSafe } from '@/utils/validation'\nimport type { AddOwnerFlowProps } from '.'\nimport type { ReplaceOwnerFlowProps } from '../ReplaceOwner'\nimport TxCard from '../../common/TxCard'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport commonCss from '@/components/tx-flow/common/styles.module.css'\nimport { TOOLTIP_TITLES } from '@/components/tx-flow/common/constants'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { maybePlural } from '@/utils/formatters'\n\ntype FormData = Pick<AddOwnerFlowProps | ReplaceOwnerFlowProps, 'newOwner' | 'threshold'>\n\nexport enum ChooseOwnerMode {\n  REPLACE,\n  ADD,\n}\n\nexport const ChooseOwner = ({\n  params,\n  onSubmit,\n  mode,\n}: {\n  params: AddOwnerFlowProps | ReplaceOwnerFlowProps\n  onSubmit: (data: FormData) => void\n  mode: ChooseOwnerMode\n}) => {\n  const { safe, safeAddress } = useSafeInfo()\n\n  const formMethods = useForm<FormData>({\n    defaultValues: params,\n    mode: 'onChange',\n  })\n  const { handleSubmit, formState, watch, control } = formMethods\n  const isValid = Object.keys(formState.errors).length === 0 // do not use formState.isValid because names can be empty\n\n  const notAlreadyOwner = uniqueAddress(safe.owners.map((owner) => owner.value))\n  const notCurrentSafe = addressIsNotCurrentSafe(safeAddress)\n  const combinedValidate = (address: string) => notAlreadyOwner(address) || notCurrentSafe(address)\n\n  const address = watch('newOwner.address')\n\n  const { name, ens, resolving } = useAddressResolver(address)\n\n  // Address book, ENS\n  const fallbackName = name || ens\n\n  const onFormSubmit = handleSubmit((formData: FormData) => {\n    onSubmit({\n      ...formData,\n      newOwner: {\n        ...formData.newOwner,\n        name: formData.newOwner.name || fallbackName,\n      },\n      threshold: formData.threshold,\n    })\n  })\n\n  const newNumberOfOwners = safe.owners.length + (!params.removedOwner ? 1 : 0)\n\n  return (\n    <TxCard>\n      <FormProvider {...formMethods}>\n        <form onSubmit={onFormSubmit} className={commonCss.form}>\n          {params.removedOwner && (\n            <>\n              <Typography\n                variant=\"body2\"\n                sx={{\n                  mb: 1,\n                }}\n              >\n                {params.removedOwner &&\n                  'Review the signer you want to replace in the active Safe Account, then specify the new signer you want to replace it with:'}\n              </Typography>\n              <Box\n                sx={{\n                  my: 3,\n                }}\n              >\n                <Typography\n                  variant=\"body2\"\n                  sx={{\n                    color: 'text.secondary',\n                    mb: 1,\n                  }}\n                >\n                  Current signer\n                </Typography>\n                <EthHashInfo address={params.removedOwner.address} showCopyButton shortAddress={false} hasExplorer />\n              </Box>\n            </>\n          )}\n\n          <FormControl fullWidth>\n            <NameInput\n              label=\"New signer\"\n              name=\"newOwner.name\"\n              placeholder={fallbackName || 'Signer name'}\n              InputLabelProps={{ shrink: true }}\n              InputProps={{\n                endAdornment: resolving && (\n                  <InputAdornment position=\"end\">\n                    <CircularProgress size={20} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </FormControl>\n\n          <FormControl fullWidth>\n            <AddressBookInput\n              name=\"newOwner.address\"\n              label=\"Signer address or ENS\"\n              validate={combinedValidate}\n              required\n            />\n          </FormControl>\n\n          <Divider className={commonCss.nestedDivider} />\n\n          {mode === ChooseOwnerMode.ADD && (\n            <FormControl fullWidth>\n              <Typography\n                variant=\"h6\"\n                sx={{\n                  fontWeight: 700,\n                  mt: 3,\n                }}\n              >\n                Threshold\n                <Tooltip title={TOOLTIP_TITLES.THRESHOLD} arrow placement=\"top\">\n                  <span>\n                    <SvgIcon\n                      component={InfoIcon}\n                      inheritViewBox\n                      color=\"border\"\n                      fontSize=\"small\"\n                      sx={{\n                        verticalAlign: 'middle',\n                        ml: 0.5,\n                      }}\n                    />\n                  </span>\n                </Tooltip>\n              </Typography>\n\n              <Typography\n                variant=\"body2\"\n                sx={{\n                  mb: 1,\n                }}\n              >\n                Any transaction requires the confirmation of:\n              </Typography>\n\n              <Grid\n                container\n                direction=\"row\"\n                sx={{\n                  alignItems: 'center',\n                  gap: 2,\n                  pt: 1,\n                }}\n              >\n                <Grid item>\n                  <Controller\n                    control={control}\n                    name=\"threshold\"\n                    render={({ field }) => (\n                      <TextField data-testid=\"owner-number-dropdown\" select {...field}>\n                        {safe.owners.map((_, idx) => (\n                          <MenuItem key={idx + 1} value={idx + 1}>\n                            {idx + 1}\n                          </MenuItem>\n                        ))}\n                        {!params.removedOwner && (\n                          <MenuItem key={newNumberOfOwners} value={newNumberOfOwners}>\n                            {newNumberOfOwners}\n                          </MenuItem>\n                        )}\n                      </TextField>\n                    )}\n                  />\n                </Grid>\n                <Grid item>\n                  <Typography>\n                    out of {newNumberOfOwners} signer{maybePlural(newNumberOfOwners)}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </FormControl>\n          )}\n\n          <Divider className={commonCss.nestedDivider} />\n\n          <CardActions>\n            <Button data-testid=\"add-owner-next-btn\" variant=\"contained\" type=\"submit\" disabled={!isValid || resolving}>\n              Next\n            </Button>\n          </CardActions>\n        </form>\n      </FormProvider>\n    </TxCard>\n  )\n}\n","import { useCurrentChain } from '@/hooks/useChains'\nimport { useContext, useEffect } from 'react'\n\nimport SignOrExecuteForm from '@/components/tx/SignOrExecuteForm'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { trackEvent, SETTINGS_EVENTS } from '@/services/analytics'\nimport { createSwapOwnerTx, createAddOwnerTx } from '@/services/tx/tx-sender'\nimport { useAppDispatch } from '@/store'\nimport { upsertAddressBookEntries } from '@/store/addressBookSlice'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport type { AddOwnerFlowProps } from '.'\nimport type { ReplaceOwnerFlowProps } from '../ReplaceOwner'\nimport { SettingsChangeContext } from './context'\n\nexport const ReviewOwner = ({ params }: { params: AddOwnerFlowProps | ReplaceOwnerFlowProps }) => {\n  const dispatch = useAppDispatch()\n  const { setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  const { safe } = useSafeInfo()\n  const { chainId } = safe\n  const chain = useCurrentChain()\n  const { newOwner, removedOwner, threshold } = params\n\n  useEffect(() => {\n    if (!chain) return\n\n    const promise = removedOwner\n      ? createSwapOwnerTx(chain, safe.deployed, {\n          newOwnerAddress: newOwner.address,\n          oldOwnerAddress: removedOwner.address,\n        })\n      : createAddOwnerTx(chain, safe.deployed, {\n          ownerAddress: newOwner.address,\n          threshold,\n        })\n\n    promise.then(setSafeTx).catch(setSafeTxError)\n  }, [removedOwner, newOwner, threshold, setSafeTx, setSafeTxError, chain, safe.deployed])\n\n  const addAddressBookEntryAndSubmit = () => {\n    if (typeof newOwner.name !== 'undefined') {\n      dispatch(\n        upsertAddressBookEntries({\n          chainIds: [chainId],\n          address: newOwner.address,\n          name: newOwner.name,\n        }),\n      )\n    }\n\n    trackEvent({ ...SETTINGS_EVENTS.SETUP.THRESHOLD, label: safe.threshold })\n    trackEvent({ ...SETTINGS_EVENTS.SETUP.OWNERS, label: safe.owners.length })\n  }\n\n  return (\n    <SettingsChangeContext.Provider value={params}>\n      <SignOrExecuteForm onSubmit={addAddressBookEntryAndSubmit} showMethodCall />\n    </SettingsChangeContext.Provider>\n  )\n}\n","import { MODAL_NAVIGATION, trackEvent } from '@/services/analytics'\nimport { useCallback, useState } from 'react'\n\nconst useTxStepper = <T extends unknown>(initialData: T, eventCategory?: string) => {\n  const [step, setStep] = useState(0)\n  const [data, setData] = useState<T>(initialData)\n\n  const nextStep = useCallback(\n    (entireData: T) => {\n      setData(entireData)\n      setStep((prevStep) => {\n        if (eventCategory) {\n          trackEvent({ action: MODAL_NAVIGATION.Next, category: eventCategory, label: prevStep })\n        }\n\n        return prevStep + 1\n      })\n    },\n    [eventCategory],\n  )\n\n  const prevStep = useCallback(() => {\n    setStep((prevStep) => {\n      if (eventCategory) {\n        trackEvent({ action: MODAL_NAVIGATION.Back, category: eventCategory, label: prevStep })\n      }\n      return prevStep - 1\n    })\n  }, [eventCategory])\n\n  return { step, data, nextStep, prevStep }\n}\n\nexport default useTxStepper\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"unknownAddress\":\"styles_unknownAddress__BH1i2\"};"],"names":["abFilterOptions","createFilterOptions","stringify","option","name","label","canAdd","props","AddressBookInput","addressBook","useAddressBook","setValue","control","useFormContext","addressValue","useWatch","open","setOpen","useState","openAddressBook","setOpenAddressBook","addressBookEntries","Object","entries","map","address","hasVisibleOptions","useMemo","filter","entry","includes","length","isInAddressBook","some","sameAddress","customFilterOptions","options","state","isValidAddress","handleOpenAutocomplete","value","onAddressBookClick","undefined","Controller","render","field","ref","Autocomplete","className","inputCss","disabled","readOnly","InputProps","freeSolo","onChange","_","onInputChange","filterOptions","componentsProps","paper","elevation","renderOption","key","rest","Typography","data-testid","component","variant","EthHashInfo","shortAddress","copyAddress","renderInput","AddressInput","params","focused","onOpenListClick","isAutocompleteOpen","css","SvgIcon","InfoIcon","fontSize","span","a","role","onClick","EntryDialog","handleClose","defaultValues","TOOLTIP_TITLES","THRESHOLD","REVIEW_WINDOW","PROPOSAL_EXPIRY","ChooseOwnerMode","ChooseOwner","onSubmit","mode","safe","safeAddress","useSafeInfo","formMethods","useForm","handleSubmit","formState","watch","isValid","keys","errors","notAlreadyOwner","uniqueAddress","owners","owner","notCurrentSafe","addressIsNotCurrentSafe","ens","resolving","useAddressResolver","fallbackName","onFormSubmit","formData","newOwner","threshold","newNumberOfOwners","removedOwner","TxCard","FormProvider","form","commonCss","sx","mb","Box","my","color","showCopyButton","hasExplorer","FormControl","fullWidth","NameInput","placeholder","InputLabelProps","shrink","endAdornment","InputAdornment","position","CircularProgress","size","validate","combinedValidate","required","Divider","fontWeight","mt","Tooltip","title","arrow","placement","inheritViewBox","verticalAlign","ml","Grid","container","direction","alignItems","gap","pt","item","TextField","select","idx","MenuItem","maybePlural","CardActions","Button","type","ReviewOwner","dispatch","useAppDispatch","setSafeTx","setSafeTxError","useContext","SafeTxContext","chainId","chain","useCurrentChain","useEffect","promise","createSwapOwnerTx","deployed","newOwnerAddress","oldOwnerAddress","createAddOwnerTx","ownerAddress","then","catch","SettingsChangeContext","Provider","SignOrExecuteForm","addAddressBookEntryAndSubmit","upsertAddressBookEntries","chainIds","trackEvent","SETTINGS_EVENTS","SETUP","OWNERS","showMethodCall","initialData","eventCategory","step","setStep","useTxStepper","data","setData","nextStep","useCallback","entireData","action","MODAL_NAVIGATION","Next","category","prevStep","Back"],"sourceRoot":"","ignoreList":[]}