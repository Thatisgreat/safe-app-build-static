{"version":3,"file":"static/chunks/9210.72d411a2a16e7b01.js","mappings":"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","sources":["webpack://_N_E/./src/services/tx/safeUpdateParams.ts","webpack://_N_E/./src/components/tx-flow/flows/UpdateSafe/UpdateSafeReview.tsx","webpack://_N_E/./src/components/tx-flow/flows/UpdateSafe/index.tsx","webpack://_N_E/./src/utils/safe-versions.ts"],"sourcesContent":["import type { SafeContractImplementationType } from '@safe-global/protocol-kit/dist/src/types/contracts'\nimport type { MetaTransactionData } from '@safe-global/safe-core-sdk-types'\nimport { OperationType } from '@safe-global/safe-core-sdk-types'\nimport type { ChainInfo, SafeInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport semverSatisfies from 'semver/functions/satisfies'\nimport { getReadOnlyFallbackHandlerContract, getReadOnlyGnosisSafeContract } from '@/services/contracts/safeContracts'\nimport { assertValidSafeVersion } from '@/hooks/coreSDK/safeCoreSDK'\nimport { SAFE_FEATURES } from '@safe-global/protocol-kit/dist/src/utils/safeVersions'\nimport { hasSafeFeature } from '@/utils/safe-versions'\nimport { getLatestSafeVersion } from '@/utils/chains'\nimport { createUpdateMigration } from '@/utils/safe-migrations'\n\nconst getChangeFallbackHandlerCallData = async (\n  safeContractInstance: SafeContractImplementationType,\n  chain: ChainInfo,\n): Promise<string> => {\n  if (!hasSafeFeature(SAFE_FEATURES.SAFE_FALLBACK_HANDLER, getLatestSafeVersion(chain))) {\n    return '0x'\n  }\n\n  const fallbackHandlerAddress = await (\n    await getReadOnlyFallbackHandlerContract(getLatestSafeVersion(chain))\n  ).getAddress()\n  // @ts-ignore\n  return safeContractInstance.encode('setFallbackHandler', [fallbackHandlerAddress])\n}\n\n/**\n * For 1.3.0 Safes, does a delegate call to a migration contract.\n *\n * For older Safes, creates two transactions:\n * - change the mastercopy address\n * - set the fallback handler address\n */\nexport const createUpdateSafeTxs = async (safe: SafeInfo, chain: ChainInfo): Promise<MetaTransactionData[]> => {\n  assertValidSafeVersion(safe.version)\n\n  // 1.3.0 Safes are updated using a delegate call to a migration contract\n  if (semverSatisfies(safe.version, '1.3.0')) {\n    return [createUpdateMigration(chain, safe.version, safe.fallbackHandler?.value)]\n  }\n\n  // For older Safes, we need to create two transactions\n  const latestMasterCopyAddress = await (\n    await getReadOnlyGnosisSafeContract(chain, getLatestSafeVersion(chain))\n  ).getAddress()\n  const currentReadOnlySafeContract = await getReadOnlyGnosisSafeContract(chain, safe.version)\n\n  const updatedReadOnlySafeContract = await getReadOnlyGnosisSafeContract(chain, getLatestSafeVersion(chain, true))\n\n  // @ts-expect-error this was removed in 1.3.0 but we need to support it for older safe versions\n  const changeMasterCopyCallData = currentReadOnlySafeContract.encode('changeMasterCopy', [latestMasterCopyAddress])\n  const changeFallbackHandlerCallData = await getChangeFallbackHandlerCallData(updatedReadOnlySafeContract, chain)\n\n  const txs: MetaTransactionData[] = [\n    {\n      to: safe.address.value,\n      value: '0',\n      data: changeMasterCopyCallData,\n      operation: OperationType.Call,\n    },\n    {\n      to: safe.address.value,\n      value: '0',\n      data: changeFallbackHandlerCallData,\n      operation: OperationType.Call,\n    },\n  ]\n\n  return txs\n}\n","import { useContext } from 'react'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { createUpdateSafeTxs } from '@/services/tx/safeUpdateParams'\nimport { createMultiSendCallOnlyTx, createTx } from '@/services/tx/tx-sender'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport SignOrExecuteForm from '@/components/tx/SignOrExecuteForm'\nimport useAsync from '@/hooks/useAsync'\n\nexport const UpdateSafeReview = () => {\n  const { safe, safeLoaded } = useSafeInfo()\n  const chain = useCurrentChain()\n  const { setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n\n  useAsync(async () => {\n    if (!chain || !safeLoaded) return\n\n    const txs = await createUpdateSafeTxs(safe, chain)\n    const safeTxPromise = txs.length > 1 ? createMultiSendCallOnlyTx(txs) : createTx(txs[0])\n\n    safeTxPromise.then(setSafeTx).catch(setSafeTxError)\n  }, [safe, safeLoaded, chain, setSafeTx, setSafeTxError])\n\n  return <SignOrExecuteForm />\n}\n","import TxLayout from '@/components/tx-flow/common/TxLayout'\nimport { UpdateSafeReview } from './UpdateSafeReview'\nimport SettingsIcon from '@/public/images/sidebar/settings.svg'\n\nconst UpdateSafeFlow = () => {\n  return (\n    <TxLayout title=\"Confirm transaction\" subtitle=\"Update Safe Account version\" icon={SettingsIcon}>\n      <UpdateSafeReview />\n    </TxLayout>\n  )\n}\n\nexport default UpdateSafeFlow\n","import {\n  hasSafeFeature as sdkHasSafeFeature,\n  type SAFE_FEATURES,\n} from '@safe-global/protocol-kit/dist/src/utils/safeVersions'\nimport type { SafeInfo } from '@safe-global/safe-gateway-typescript-sdk'\n\n// Note: backend returns `SafeInfo['version']` as `null` for unsupported contracts\nexport const hasSafeFeature = (feature: SAFE_FEATURES, version: SafeInfo['version']): boolean => {\n  if (!version) {\n    return false\n  }\n  return sdkHasSafeFeature(feature, version)\n}\n"],"names":["getChangeFallbackHandlerCallData","safeContractInstance","chain","hasSafeFeature","SAFE_FEATURES","SAFE_FALLBACK_HANDLER","getLatestSafeVersion","fallbackHandlerAddress","getReadOnlyFallbackHandlerContract","getAddress","encode","createUpdateSafeTxs","safe","assertValidSafeVersion","version","semverSatisfies","createUpdateMigration","fallbackHandler","value","latestMasterCopyAddress","getReadOnlyGnosisSafeContract","currentReadOnlySafeContract","updatedReadOnlySafeContract","changeMasterCopyCallData","changeFallbackHandlerCallData","to","address","data","operation","OperationType","Call","UpdateSafeReview","safeLoaded","useSafeInfo","useCurrentChain","setSafeTx","setSafeTxError","useContext","SafeTxContext","useAsync","txs","safeTxPromise","length","createMultiSendCallOnlyTx","createTx","then","catch","SignOrExecuteForm","TxLayout","title","UpdateSafeFlow","subtitle","icon","SettingsIcon","feature","sdkHasSafeFeature"],"sourceRoot":"","ignoreList":[]}