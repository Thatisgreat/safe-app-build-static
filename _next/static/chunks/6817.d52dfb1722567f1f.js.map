{"version":3,"file":"static/chunks/6817.d52dfb1722567f1f.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./node_modules/@mui/icons-material/esm/ExpandMoreRounded.js","webpack://_N_E/./src/components/tx-flow/flows/NewSpendingLimit/CreateSpendingLimit.tsx","webpack://_N_E/./src/components/tx-flow/flows/NewSpendingLimit/ReviewSpendingLimit.tsx","webpack://_N_E/./src/components/tx-flow/flows/NewSpendingLimit/index.tsx"],"sourcesContent":["export * from \"/Users/liuxiaolin/Documents/other/safe-wallet-monorepo/apps/web/src/components/common/Mui/index.tsx\"","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.88 9.29 12 13.17 8.12 9.29a.996.996 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0\"\n}), 'ExpandMoreRounded');","import { useCallback, useMemo } from 'react'\nimport { Controller, FormProvider, useForm } from 'react-hook-form'\nimport { Button, CardActions, FormControl, InputLabel, MenuItem, Select, Typography } from '@mui/material'\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded'\nimport { parseUnits, AbiCoder } from 'ethers'\n\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport useChainId from '@/hooks/useChainId'\nimport { getResetTimeOptions } from '@/components/transactions/TxDetails/TxData/SpendingLimits'\nimport { useVisibleBalances } from '@/hooks/useVisibleBalances'\nimport type { NewSpendingLimitFlowProps } from '.'\nimport TxCard from '../../common/TxCard'\nimport css from '@/components/tx/ExecuteCheckbox/styles.module.css'\nimport TokenAmountInput from '@/components/common/TokenAmountInput'\nimport { SpendingLimitFields } from '.'\nimport { validateAmount, validateDecimalLength } from '@/utils/validation'\n\nexport const _validateSpendingLimit = (val: string, decimals?: number | null) => {\n  // Allowance amount is uint96 https://github.com/safe-global/safe-modules/blob/master/allowances/contracts/AlowanceModule.sol#L52\n  try {\n    const amount = parseUnits(val, decimals ?? 'Gwei')\n    AbiCoder.defaultAbiCoder().encode(['int96'], [amount])\n  } catch (e) {\n    return Number(val) > 1 ? 'Amount is too big' : 'Amount is too small'\n  }\n}\n\nexport const CreateSpendingLimit = ({\n  params,\n  onSubmit,\n}: {\n  params: NewSpendingLimitFlowProps\n  onSubmit: (data: NewSpendingLimitFlowProps) => void\n}) => {\n  const chainId = useChainId()\n  const { balances } = useVisibleBalances()\n\n  const resetTimeOptions = useMemo(() => getResetTimeOptions(chainId), [chainId])\n\n  const formMethods = useForm<NewSpendingLimitFlowProps>({\n    defaultValues: params,\n    mode: 'onChange',\n  })\n\n  const { handleSubmit, watch, control } = formMethods\n\n  const tokenAddress = watch(SpendingLimitFields.tokenAddress)\n  const selectedToken = tokenAddress\n    ? balances.items.find((item) => item.tokenInfo.address === tokenAddress)\n    : undefined\n\n  const validateSpendingLimit = useCallback(\n    (value: string) => {\n      return (\n        validateAmount(value) ||\n        validateDecimalLength(value, selectedToken?.tokenInfo.decimals) ||\n        _validateSpendingLimit(value, selectedToken?.tokenInfo.decimals)\n      )\n    },\n    [selectedToken?.tokenInfo.decimals],\n  )\n\n  return (\n    <TxCard>\n      <FormProvider {...formMethods}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl fullWidth sx={{ mb: 3 }}>\n            <AddressBookInput\n              data-testid=\"beneficiary-section\"\n              name={SpendingLimitFields.beneficiary}\n              label=\"Beneficiary\"\n            />\n          </FormControl>\n\n          <TokenAmountInput balances={balances.items} selectedToken={selectedToken} validate={validateSpendingLimit} />\n\n          <Typography variant=\"h4\" fontWeight={700} mt={3}>\n            Reset Timer\n          </Typography>\n          <Typography>\n            Set a reset time so the allowance automatically refills after the defined time period.\n          </Typography>\n          <FormControl fullWidth className={css.select}>\n            <InputLabel shrink={false}>Time Period</InputLabel>\n            <Controller\n              rules={{ required: true }}\n              control={control}\n              name={SpendingLimitFields.resetTime}\n              render={({ field }) => (\n                <Select\n                  data-testid=\"time-period-section\"\n                  {...field}\n                  sx={{ textAlign: 'right', fontWeight: 700 }}\n                  IconComponent={ExpandMoreRoundedIcon}\n                >\n                  {resetTimeOptions.map((resetTime) => (\n                    <MenuItem\n                      data-testid=\"time-period-item\"\n                      key={resetTime.value}\n                      value={resetTime.value}\n                      sx={{ overflow: 'hidden' }}\n                    >\n                      {resetTime.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormControl>\n\n          <CardActions>\n            <Button data-testid=\"next-btn\" variant=\"contained\" type=\"submit\">\n              Next\n            </Button>\n          </CardActions>\n        </form>\n      </FormProvider>\n    </TxCard>\n  )\n}\n","import { useCurrentChain } from '@/hooks/useChains'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { useEffect, useMemo, useContext } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Typography, Grid, Alert } from '@mui/material'\n\nimport SpendingLimitLabel from '@/components/common/SpendingLimitLabel'\nimport { getResetTimeOptions } from '@/components/transactions/TxDetails/TxData/SpendingLimits'\nimport SendAmountBlock from '@/components/tx-flow/flows/TokenTransfer/SendAmountBlock'\nimport SignOrExecuteForm from '@/components/tx/SignOrExecuteForm'\nimport useBalances from '@/hooks/useBalances'\nimport useChainId from '@/hooks/useChainId'\nimport { trackEvent, SETTINGS_EVENTS } from '@/services/analytics'\nimport { createNewSpendingLimitTx } from '@/services/tx/tx-sender'\nimport { selectSpendingLimits } from '@/store/spendingLimitsSlice'\nimport { formatVisualAmount, safeParseUnits } from '@/utils/formatters'\nimport type { NewSpendingLimitFlowProps } from '.'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { SafeTxContext } from '../../SafeTxProvider'\n\nexport const ReviewSpendingLimit = ({ params }: { params: NewSpendingLimitFlowProps }) => {\n  const spendingLimits = useSelector(selectSpendingLimits)\n  const { safe } = useSafeInfo()\n  const chainId = useChainId()\n  const chain = useCurrentChain()\n  const { balances } = useBalances()\n  const { setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  const token = balances.items.find((item) => item.tokenInfo.address === params.tokenAddress)\n  const { decimals } = token?.tokenInfo || {}\n\n  const amountInWei = useMemo(\n    () => safeParseUnits(params.amount, token?.tokenInfo.decimals)?.toString() || '0',\n    [params.amount, token?.tokenInfo.decimals],\n  )\n\n  const existingSpendingLimit = useMemo(() => {\n    return spendingLimits.find(\n      (spendingLimit) =>\n        spendingLimit.beneficiary === params.beneficiary && spendingLimit.token.address === params.tokenAddress,\n    )\n  }, [spendingLimits, params])\n\n  useEffect(() => {\n    if (!chain) return\n\n    createNewSpendingLimitTx(\n      params,\n      spendingLimits,\n      chainId,\n      chain,\n      safe.modules,\n      safe.deployed,\n      decimals,\n      existingSpendingLimit,\n    )\n      .then(setSafeTx)\n      .catch(setSafeTxError)\n  }, [\n    chain,\n    chainId,\n    decimals,\n    existingSpendingLimit,\n    params,\n    safe.modules,\n    safe.deployed,\n    setSafeTx,\n    setSafeTxError,\n    spendingLimits,\n  ])\n\n  const isOneTime = params.resetTime === '0'\n  const resetTime = useMemo(() => {\n    return isOneTime\n      ? 'One-time spending limit'\n      : getResetTimeOptions(chainId).find((time) => time.value === params.resetTime)?.label\n  }, [isOneTime, params.resetTime, chainId])\n\n  const onFormSubmit = () => {\n    trackEvent({\n      ...SETTINGS_EVENTS.SPENDING_LIMIT.RESET_PERIOD,\n      label: resetTime,\n    })\n  }\n\n  const existingAmount = existingSpendingLimit\n    ? formatVisualAmount(BigInt(existingSpendingLimit?.amount), decimals)\n    : undefined\n\n  const oldResetTime = existingSpendingLimit\n    ? getResetTimeOptions(chainId).find((time) => time.value === existingSpendingLimit?.resetTimeMin)?.label\n    : undefined\n\n  return (\n    <SignOrExecuteForm onSubmit={onFormSubmit}>\n      {token && (\n        <SendAmountBlock amountInWei={amountInWei} tokenInfo={token.tokenInfo} title=\"Amount\">\n          {existingAmount && existingAmount !== params.amount && (\n            <>\n              <Typography\n                data-testid=\"old-token-amount\"\n                color=\"error\"\n                sx={{ textDecoration: 'line-through' }}\n                component=\"span\"\n              >\n                {existingAmount}\n              </Typography>\n              →\n            </>\n          )}\n        </SendAmountBlock>\n      )}\n      <Grid\n        container\n        sx={{\n          gap: 1,\n          alignItems: 'center',\n        }}\n      >\n        <Grid item md>\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: 'text.secondary',\n            }}\n          >\n            Beneficiary\n          </Typography>\n        </Grid>\n\n        <Grid data-testid=\"beneficiary-address\" item md={10}>\n          <EthHashInfo\n            address={params.beneficiary}\n            shortAddress={false}\n            hasExplorer\n            showCopyButton\n            showAvatar={false}\n          />\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        sx={{\n          gap: 1,\n          alignItems: 'center',\n        }}\n      >\n        <Grid item md>\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: 'text.secondary',\n            }}\n          >\n            Reset time\n          </Typography>\n        </Grid>\n        <Grid item md={10}>\n          {existingSpendingLimit ? (\n            <>\n              <SpendingLimitLabel\n                label={\n                  <>\n                    {existingSpendingLimit.resetTimeMin !== params.resetTime && (\n                      <>\n                        <Typography\n                          data-testid=\"old-reset-time\"\n                          color=\"error\"\n                          component=\"span\"\n                          sx={{\n                            display: 'inline',\n                            textDecoration: 'line-through',\n                          }}\n                        >\n                          {oldResetTime}\n                        </Typography>\n                        {' → '}\n                      </>\n                    )}\n                    <Typography\n                      component=\"span\"\n                      sx={{\n                        display: 'inline',\n                      }}\n                    >\n                      {resetTime}\n                    </Typography>\n                  </>\n                }\n                isOneTime={existingSpendingLimit.resetTimeMin === '0'}\n              />\n            </>\n          ) : (\n            <SpendingLimitLabel\n              data-testid=\"spending-limit-label\"\n              label={resetTime || 'One-time spending limit'}\n              isOneTime={!!resetTime && isOneTime}\n            />\n          )}\n        </Grid>\n      </Grid>\n      {existingSpendingLimit && (\n        <Alert severity=\"warning\" sx={{ border: 'unset' }}>\n          <Typography\n            data-testid=\"limit-replacement-warning\"\n            sx={{\n              fontWeight: 700,\n            }}\n          >\n            You are about to replace an existing spending limit\n          </Typography>\n        </Alert>\n      )}\n    </SignOrExecuteForm>\n  )\n}\n","import TxLayout from '../../common/TxLayout'\nimport useTxStepper from '../../useTxStepper'\nimport { CreateSpendingLimit } from './CreateSpendingLimit'\nimport { ReviewSpendingLimit } from './ReviewSpendingLimit'\nimport SaveAddressIcon from '@/public/images/common/save-address.svg'\nimport { ZERO_ADDRESS } from '@safe-global/protocol-kit/dist/src/utils/constants'\nimport { TokenAmountFields } from '@/components/common/TokenAmountInput'\n\nenum Fields {\n  beneficiary = 'beneficiary',\n  resetTime = 'resetTime',\n}\n\nexport const SpendingLimitFields = { ...Fields, ...TokenAmountFields }\n\nexport type NewSpendingLimitFlowProps = {\n  [SpendingLimitFields.beneficiary]: string\n  [SpendingLimitFields.tokenAddress]: string\n  [SpendingLimitFields.amount]: string\n  [SpendingLimitFields.resetTime]: string\n}\n\nconst defaultValues: NewSpendingLimitFlowProps = {\n  beneficiary: '',\n  tokenAddress: ZERO_ADDRESS,\n  amount: '',\n  resetTime: '0',\n}\n\nconst NewSpendingLimitFlow = () => {\n  const { data, step, nextStep, prevStep } = useTxStepper<NewSpendingLimitFlowProps>(defaultValues)\n\n  const steps = [\n    <CreateSpendingLimit key={0} params={data} onSubmit={(formData) => nextStep({ ...data, ...formData })} />,\n    <ReviewSpendingLimit key={1} params={data} />,\n  ]\n\n  return (\n    <TxLayout\n      title={step === 0 ? 'New transaction' : 'Confirm transaction'}\n      subtitle=\"Spending limit\"\n      icon={SaveAddressIcon}\n      step={step}\n      onBack={prevStep}\n    >\n      {steps}\n    </TxLayout>\n  )\n}\n\nexport default NewSpendingLimitFlow\n"],"names":["createSvgIcon","_jsx","d","_validateSpendingLimit","val","decimals","amount","parseUnits","AbiCoder","defaultAbiCoder","encode","e","Number","CreateSpendingLimit","params","onSubmit","chainId","useChainId","balances","useVisibleBalances","resetTimeOptions","useMemo","getResetTimeOptions","formMethods","useForm","defaultValues","mode","handleSubmit","watch","control","tokenAddress","SpendingLimitFields","selectedToken","items","find","item","tokenInfo","address","undefined","validateSpendingLimit","useCallback","validateAmount","value","validateDecimalLength","TxCard","FormProvider","form","FormControl","fullWidth","sx","mb","AddressBookInput","data-testid","name","beneficiary","label","TokenAmountInput","validate","Typography","variant","fontWeight","mt","className","css","InputLabel","shrink","Controller","rules","required","resetTime","render","field","Select","textAlign","IconComponent","ExpandMoreRoundedIcon","map","MenuItem","overflow","CardActions","Button","type","ReviewSpendingLimit","spendingLimits","useSelector","selectSpendingLimits","safe","useSafeInfo","chain","useCurrentChain","useBalances","setSafeTx","setSafeTxError","useContext","SafeTxContext","token","amountInWei","safeParseUnits","toString","existingSpendingLimit","spendingLimit","useEffect","createNewSpendingLimitTx","modules","deployed","then","catch","isOneTime","time","existingAmount","formatVisualAmount","BigInt","oldResetTime","resetTimeMin","SignOrExecuteForm","onFormSubmit","trackEvent","SETTINGS_EVENTS","SPENDING_LIMIT","RESET_PERIOD","SendAmountBlock","title","color","textDecoration","component","Grid","container","gap","alignItems","md","EthHashInfo","shortAddress","hasExplorer","showCopyButton","showAvatar","SpendingLimitLabel","display","Alert","severity","border","Fields","TokenAmountFields","ZERO_ADDRESS","data","NewSpendingLimitFlow","step","nextStep","prevStep","useTxStepper","steps","formData","TxLayout","subtitle","icon","SaveAddressIcon","onBack"],"sourceRoot":"","ignoreList":[1]}