{"version":3,"file":"static/chunks/3732.4abe3efa13bc39a4.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/icons-material/esm/South.js","webpack://_N_E/./src/components/tx/SendFromBlock/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessageOnChain/ReviewSignMessageOnChain.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessageOnChain/index.tsx","webpack://_N_E/./src/components/tx/SendFromBlock/styles.module.css"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m19 15-1.41-1.41L13 18.17V2h-2v16.17l-4.59-4.59L5 15l7 7z\"\n}), 'South');","import { type ReactElement } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport SouthIcon from '@mui/icons-material/South'\nimport css from './styles.module.css'\nimport useSafeAddress from '@/hooks/useSafeAddress'\nimport EthHashInfo from '@/components/common/EthHashInfo'\n\n// TODO: Remove this file after replacing in all tx flow components\nconst SendFromBlock = ({ title }: { title?: string }): ReactElement => {\n  const address = useSafeAddress()\n\n  return (\n    <Box className={css.container} pb={2} mb={2}>\n      <Typography color=\"text.secondary\" pb={1}>\n        {title || 'Sending from'}\n      </Typography>\n\n      <Typography variant=\"body2\" component=\"div\">\n        <EthHashInfo address={address} shortAddress={false} hasExplorer showCopyButton />\n      </Typography>\n\n      <SouthIcon className={css.arrow} />\n    </Box>\n  )\n}\n\nexport default SendFromBlock\n","import useWallet from '@/hooks/wallets/useWallet'\nimport type { ReactElement } from 'react'\nimport { useContext, useEffect, useState } from 'react'\nimport { useMemo } from 'react'\nimport { hashMessage, TypedDataEncoder } from 'ethers'\nimport { Box } from '@mui/system'\nimport { Typography, SvgIcon } from '@mui/material'\nimport WarningIcon from '@/public/images/notifications/warning.svg'\nimport { type EIP712TypedData, Methods, type RequestId } from '@safe-global/safe-apps-sdk'\nimport { OperationType } from '@safe-global/safe-core-sdk-types'\n\nimport SendFromBlock from '@/components/tx/SendFromBlock'\nimport { InfoDetails } from '@/components/transactions/InfoDetails'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport SignOrExecuteForm from '@/components/tx/SignOrExecuteForm'\nimport { getReadOnlySignMessageLibContract } from '@/services/contracts/safeContracts'\nimport { DecodedMsg } from '@/components/safe-messages/DecodedMsg'\nimport CopyButton from '@/components/common/CopyButton'\nimport { getDecodedMessage } from '@/components/safe-apps/utils'\nimport { createTx, dispatchSafeAppsTx } from '@/services/tx/tx-sender'\nimport useOnboard from '@/hooks/wallets/useOnboard'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport useHighlightHiddenTab from '@/hooks/useHighlightHiddenTab'\nimport { type SafeAppData } from '@safe-global/safe-gateway-typescript-sdk'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport { asError } from '@/services/exceptions/utils'\nimport { isEIP712TypedData } from '@/utils/safe-messages'\nimport ApprovalEditor from '@/components/tx/ApprovalEditor'\nimport { ErrorBoundary } from '@sentry/react'\nimport useAsync from '@/hooks/useAsync'\nimport { HexEncodedData } from '@/components/transactions/HexEncodedData'\n\nexport type SignMessageOnChainProps = {\n  app?: SafeAppData\n  requestId: RequestId\n  message: string | EIP712TypedData\n  method: Methods.signMessage | Methods.signTypedMessage\n}\n\nconst ReviewSignMessageOnChain = ({ message, method, requestId }: SignMessageOnChainProps): ReactElement => {\n  const { safe } = useSafeInfo()\n  const onboard = useOnboard()\n  const wallet = useWallet()\n  const { safeTx, setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  useHighlightHiddenTab()\n\n  const isTextMessage = method === Methods.signMessage && typeof message === 'string'\n  const isTypedMessage = method === Methods.signTypedMessage && isEIP712TypedData(message)\n\n  const [readOnlySignMessageLibContract] = useAsync(\n    async () => getReadOnlySignMessageLibContract(safe.version),\n    [safe.version],\n  )\n\n  const [signMessageAddress, setSignMessageAddress] = useState<string>('')\n\n  useEffect(() => {\n    if (!readOnlySignMessageLibContract) return\n    readOnlySignMessageLibContract.getAddress().then(setSignMessageAddress)\n  }, [readOnlySignMessageLibContract])\n\n  const [decodedMessage, readableMessage] = useMemo(() => {\n    if (isTextMessage) {\n      const decoded = getDecodedMessage(message)\n      return [decoded, decoded]\n    } else if (isTypedMessage) {\n      return [message, JSON.stringify(message, null, 2)]\n    }\n    return []\n  }, [isTextMessage, isTypedMessage, message])\n\n  useEffect(() => {\n    let txData\n\n    if (!readOnlySignMessageLibContract) return\n\n    if (isTextMessage) {\n      txData = readOnlySignMessageLibContract.encode('signMessage', [hashMessage(getDecodedMessage(message))])\n    } else if (isTypedMessage) {\n      const typesCopy = { ...message.types }\n\n      // We need to remove the EIP712Domain type from the types object\n      // Because it's a part of the JSON-RPC payload, but for the `.hash` in ethers.js\n      // The types are not allowed to be recursive, so ever type must either be used by another type, or be\n      // the primary type. And there must only be one type that is not used by any other type.\n      delete typesCopy.EIP712Domain\n      txData = readOnlySignMessageLibContract.encode('signMessage', [\n        // @ts-ignore\n        TypedDataEncoder.hash(message.domain, typesCopy, message.message),\n      ])\n    }\n\n    const params = {\n      to: signMessageAddress,\n      value: '0',\n      data: txData ?? '0x',\n      operation: OperationType.DelegateCall,\n    }\n    createTx(params).then(setSafeTx).catch(setSafeTxError)\n  }, [\n    isTextMessage,\n    isTypedMessage,\n    message,\n    readOnlySignMessageLibContract,\n    setSafeTx,\n    setSafeTxError,\n    signMessageAddress,\n  ])\n\n  const handleSubmit = async () => {\n    if (!safeTx || !onboard || !wallet) return\n\n    try {\n      await dispatchSafeAppsTx(safeTx, requestId, wallet.provider)\n    } catch (error) {\n      setSafeTxError(asError(error))\n    }\n  }\n\n  return (\n    <SignOrExecuteForm onSubmit={handleSubmit}>\n      <SendFromBlock />\n\n      <InfoDetails title=\"Interact with SignMessageLib\">\n        <EthHashInfo address={signMessageAddress} shortAddress={false} showCopyButton hasExplorer />\n      </InfoDetails>\n\n      {isEIP712TypedData(decodedMessage) && (\n        <ErrorBoundary fallback={<div>Error parsing data</div>}>\n          <ApprovalEditor safeMessage={decodedMessage} />\n        </ErrorBoundary>\n      )}\n\n      {safeTx && (\n        <Box pb={1}>\n          <HexEncodedData title=\"Data (hex-encoded)\" hexData={safeTx.data.data} />\n        </Box>\n      )}\n\n      <Typography my={1}>\n        <b>Signing method:</b> <code>{method}</code>\n      </Typography>\n\n      <Typography my={2}>\n        <b>Signing message:</b> {readableMessage && <CopyButton text={readableMessage} />}\n      </Typography>\n      <DecodedMsg message={decodedMessage} isInModal />\n\n      <Box display=\"flex\" alignItems=\"center\" my={2}>\n        <SvgIcon component={WarningIcon} inheritViewBox color=\"warning\" />\n        <Typography ml={1}>\n          Signing a message with your Safe Account requires a transaction on the blockchain\n        </Typography>\n      </Box>\n    </SignOrExecuteForm>\n  )\n}\n\nexport default ReviewSignMessageOnChain\n","import TxLayout from '@/components/tx-flow/common/TxLayout'\nimport { AppTitle } from '@/components/tx-flow/flows/SignMessage'\nimport ReviewSignMessageOnChain, {\n  type SignMessageOnChainProps,\n} from '@/components/tx-flow/flows/SignMessageOnChain/ReviewSignMessageOnChain'\n\nconst SignMessageOnChainFlow = ({ props }: { props: SignMessageOnChainProps }) => {\n  return (\n    <TxLayout\n      title=\"Confirm message\"\n      subtitle={<AppTitle name={props.app?.name} logoUri={props.app?.iconUrl} />}\n      step={0}\n    >\n      <ReviewSignMessageOnChain {...props} />\n    </TxLayout>\n  )\n}\n\nexport default SignMessageOnChainFlow\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__upDro\",\"arrow\":\"styles_arrow__i_HzR\"};"],"names":["createSvgIcon","_jsx","d","title","SendFromBlock","address","useSafeAddress","Box","className","css","pb","mb","Typography","color","variant","component","EthHashInfo","shortAddress","hasExplorer","showCopyButton","SouthIcon","message","method","requestId","ReviewSignMessageOnChain","safe","useSafeInfo","onboard","useOnboard","wallet","useWallet","safeTx","setSafeTx","setSafeTxError","useContext","SafeTxContext","useHighlightHiddenTab","isTextMessage","Methods","signMessage","isTypedMessage","signTypedMessage","isEIP712TypedData","readOnlySignMessageLibContract","useAsync","getReadOnlySignMessageLibContract","version","signMessageAddress","setSignMessageAddress","useState","useEffect","getAddress","then","decodedMessage","readableMessage","useMemo","decoded","getDecodedMessage","JSON","stringify","txData","encode","hashMessage","typesCopy","types","EIP712Domain","TypedDataEncoder","hash","domain","params","to","value","data","operation","OperationType","DelegateCall","createTx","catch","handleSubmit","dispatchSafeAppsTx","provider","error","asError","SignOrExecuteForm","onSubmit","InfoDetails","ErrorBoundary","fallback","div","ApprovalEditor","safeMessage","HexEncodedData","hexData","my","b","code","CopyButton","text","DecodedMsg","isInModal","display","alignItems","SvgIcon","WarningIcon","inheritViewBox","ml","props","SignMessageOnChainFlow","TxLayout","subtitle","AppTitle","name","app","logoUri","iconUrl","step"],"sourceRoot":"","ignoreList":[0]}