{"version":3,"file":"static/chunks/3226.36cead47897cba80.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/hooks/messages/useDecodedSafeMessage.ts","webpack://_N_E/./src/components/tx/SuccessMessage/index.tsx","webpack://_N_E/./src/components/safe-messages/InfoBox/index.tsx","webpack://_N_E/./src/components/tx/SignOrExecuteForm/RiskConfirmationError.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessage/SignMessage.tsx","webpack://_N_E/./src/features/stake/helpers/utils.ts","webpack://_N_E/./src/components/tx-flow/flows/SignMessage/index.tsx","webpack://_N_E/./src/hooks/messages/useSafeMessage.ts","webpack://_N_E/./src/services/safe-messages/safeMsgSender.ts","webpack://_N_E/./src/hooks/messages/useSyncSafeMessageSigner.ts","webpack://_N_E/./src/hooks/useHighlightHiddenTab.ts","webpack://_N_E/./src/services/safe-messages/safeMsgNotifications.ts","webpack://_N_E/./src/components/safe-messages/InfoBox/styles.module.css","webpack://_N_E/./src/components/tx/SuccessMessage/styles.module.css"],"sourcesContent":["export * from \"/Users/liuxiaolin/Documents/other/safe-wallet-monorepo/apps/web/src/components/common/Mui/index.tsx\"","import { getDecodedMessage } from '@/components/safe-apps/utils'\nimport { generateSafeMessageMessage, generateSafeMessageHash } from '@/utils/safe-messages'\nimport type { EIP712TypedData, SafeInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useMemo } from 'react'\n\n/**\n * Returns the decoded message, the hash of the `message` and the hash of the `safeMessage`.\n * The `safeMessageMessage` is the value inside the SafeMessage and the `safeMessageHash` gets signed if the connected wallet does not support `eth_signTypedData`.\n *\n * @param message message as string, UTF-8 encoded hex string or EIP-712 Typed Data\n * @param safe SafeInfo of the opened Safe\n * @returns `{\n *   decodedMessage,\n *   safeMessageMessage,\n *   safeMessageHash\n * }`\n */\nconst useDecodedSafeMessage = (\n  message: string | EIP712TypedData,\n  safe: SafeInfo,\n): { decodedMessage: string | EIP712TypedData; safeMessageMessage: string; safeMessageHash: string } => {\n  // Decode message if UTF-8 encoded\n  const decodedMessage = useMemo(() => {\n    return typeof message === 'string' ? getDecodedMessage(message) : message\n  }, [message])\n\n  // Get `SafeMessage` message\n  const safeMessageMessage = useMemo(() => {\n    return generateSafeMessageMessage(decodedMessage)\n  }, [decodedMessage])\n\n  // Get `SafeMessage` hash\n  const safeMessageHash = useMemo(() => {\n    return generateSafeMessageHash(safe, decodedMessage)\n  }, [safe, decodedMessage])\n\n  return {\n    decodedMessage,\n    safeMessageMessage,\n    safeMessageHash,\n  }\n}\n\nexport default useDecodedSafeMessage\n","import { type ReactElement, type ReactNode } from 'react'\nimport { Typography, SvgIcon } from '@mui/material'\nimport classNames from 'classnames'\nimport CheckIcon from '@/public/images/common/check.svg'\nimport css from './styles.module.css'\n\nconst SuccessMessage = ({ children, className }: { children: ReactNode; className?: string }): ReactElement => {\n  return (\n    <div className={classNames(css.container, className)}>\n      <div className={css.message}>\n        <SvgIcon component={CheckIcon} color=\"success\" inheritViewBox fontSize=\"small\" />\n\n        <Typography variant=\"body2\" width=\"100%\">\n          {children}\n        </Typography>\n      </div>\n    </div>\n  )\n}\n\nexport default SuccessMessage\n","import type { ComponentType } from 'react'\nimport { type ReactElement, type ReactNode } from 'react'\nimport { Typography, SvgIcon, Divider } from '@mui/material'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport css from './styles.module.css'\n\nconst InfoBox = ({\n  title,\n  message,\n  children,\n  icon = InfoIcon,\n}: {\n  title: string\n  message: ReactNode\n  children?: ReactNode\n  icon?: ComponentType\n}): ReactElement => {\n  return (\n    <div data-testid=\"message-infobox\" className={css.container}>\n      <div className={css.message}>\n        <SvgIcon component={icon} color=\"info\" inheritViewBox fontSize=\"medium\" />\n        <div>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            {title}\n          </Typography>\n          <Typography variant=\"body2\">{message}</Typography>\n        </div>\n      </div>\n      {children && (\n        <>\n          <Divider className={css.divider} />\n          <div>{children}</div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default InfoBox\n","import { useContext } from 'react'\nimport ErrorMessage from '../ErrorMessage'\nimport { TxSecurityContext } from '../security/shared/TxSecurityContext'\n\nconst RiskConfirmationError = () => {\n  const { isRiskConfirmed, isRiskIgnored } = useContext(TxSecurityContext)\n\n  if (isRiskConfirmed || !isRiskIgnored) {\n    return null\n  }\n\n  return <ErrorMessage level=\"warning\">Please acknowledge the risk before proceeding.</ErrorMessage>\n}\n\nexport default RiskConfirmationError\n","import {\n  Grid,\n  Button,\n  Box,\n  Typography,\n  SvgIcon,\n  CardContent,\n  CardActions,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Link,\n} from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport { useContext, useEffect } from 'react'\nimport { SafeMessageListItemType, SafeMessageStatus } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { ReactElement } from 'react'\nimport type { SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { RequestId } from '@safe-global/safe-apps-sdk'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport RequiredIcon from '@/public/images/messages/required.svg'\nimport useSafeInfo from '@/hooks/useSafeInfo'\n\nimport useIsSafeOwner from '@/hooks/useIsSafeOwner'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport useSafeMessage from '@/hooks/messages/useSafeMessage'\nimport useOnboard, { switchWallet } from '@/hooks/wallets/useOnboard'\nimport { TxModalContext } from '@/components/tx-flow'\nimport CopyButton from '@/components/common/CopyButton'\nimport MsgSigners from '@/components/safe-messages/MsgSigners'\nimport useDecodedSafeMessage from '@/hooks/messages/useDecodedSafeMessage'\nimport useSyncSafeMessageSigner from '@/hooks/messages/useSyncSafeMessageSigner'\nimport SuccessMessage from '@/components/tx/SuccessMessage'\nimport useHighlightHiddenTab from '@/hooks/useHighlightHiddenTab'\nimport InfoBox from '@/components/safe-messages/InfoBox'\nimport { DecodedMsg } from '@/components/safe-messages/DecodedMsg'\nimport TxCard from '@/components/tx-flow/common/TxCard'\nimport { dispatchPreparedSignature } from '@/services/safe-messages/safeMsgNotifications'\nimport { trackEvent } from '@/services/analytics'\nimport { TX_EVENTS, TX_TYPES } from '@/services/analytics/events/transactions'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport RiskConfirmationError from '@/components/tx/SignOrExecuteForm/RiskConfirmationError'\nimport { TxSecurityContext } from '@/components/tx/security/shared/TxSecurityContext'\nimport { isBlindSigningPayload, isEIP712TypedData } from '@/utils/safe-messages'\nimport ApprovalEditor from '@/components/tx/ApprovalEditor'\nimport { ErrorBoundary } from '@sentry/react'\nimport { isWalletRejection } from '@/utils/wallets'\nimport { useAppSelector } from '@/store'\nimport { selectBlindSigning } from '@/store/settingsSlice'\nimport NextLink from 'next/link'\nimport { AppRoutes } from '@/config/routes'\nimport { useRouter } from 'next/router'\nimport MsgShareLink from '@/components/safe-messages/MsgShareLink'\nimport LinkIcon from '@/public/images/messages/link.svg'\nimport { Blockaid } from '@/components/tx/security/blockaid'\nimport CheckWallet from '@/components/common/CheckWallet'\nimport NetworkWarning from '@/components/new-safe/create/NetworkWarning'\nimport { getDomainHash, getSafeMessageMessageHash } from '@/utils/safe-hashes'\nimport type { SafeVersion } from '@safe-global/safe-core-sdk-types'\n\nconst createSkeletonMessage = (confirmationsRequired: number): SafeMessage => {\n  return {\n    confirmations: [],\n    confirmationsRequired,\n    confirmationsSubmitted: 0,\n    creationTimestamp: 0,\n    message: '',\n    logoUri: null,\n    messageHash: '',\n    modifiedTimestamp: 0,\n    name: null,\n    proposedBy: {\n      value: '',\n    },\n    status: SafeMessageStatus.NEEDS_CONFIRMATION,\n    type: SafeMessageListItemType.MESSAGE,\n  }\n}\n\nconst MessageHashField = ({ label, hashValue }: { label: string; hashValue: string }) => (\n  <>\n    <Typography\n      variant=\"body2\"\n      sx={{\n        fontWeight: 700,\n        mt: 2,\n      }}\n    >\n      {label}:\n    </Typography>\n    <Typography data-testid=\"message-hash\" variant=\"body2\" component=\"div\">\n      <EthHashInfo address={hashValue} showAvatar={false} shortAddress={false} showCopyButton />\n    </Typography>\n  </>\n)\n\nconst DialogHeader = ({ threshold }: { threshold: number }) => (\n  <>\n    <Box\n      sx={{\n        textAlign: 'center',\n        mb: 2,\n      }}\n    >\n      <SvgIcon component={RequiredIcon} viewBox=\"0 0 32 32\" fontSize=\"large\" />\n    </Box>\n    <Typography\n      variant=\"h4\"\n      gutterBottom\n      sx={{\n        textAlign: 'center',\n      }}\n    >\n      Confirm message\n    </Typography>\n    {threshold > 1 && (\n      <Typography\n        variant=\"body1\"\n        sx={{\n          textAlign: 'center',\n          mb: 2,\n        }}\n      >\n        To sign this message, collect signatures from <b>{threshold} signers</b> of your Safe Account.\n      </Typography>\n    )}\n  </>\n)\n\nconst MessageDialogError = ({ isOwner, submitError }: { isOwner: boolean; submitError: Error | undefined }) => {\n  const wallet = useWallet()\n  const onboard = useOnboard()\n\n  const errorMessage =\n    !wallet || !onboard\n      ? 'No wallet is connected.'\n      : !isOwner\n        ? \"You are currently not a signer of this Safe Account and won't be able to confirm this message.\"\n        : submitError && isWalletRejection(submitError)\n          ? 'User rejected signing.'\n          : submitError\n            ? 'Error confirming the message. Please try again.'\n            : null\n\n  if (errorMessage) {\n    return <ErrorMessage>{errorMessage}</ErrorMessage>\n  }\n  return null\n}\n\nconst AlreadySignedByOwnerMessage = ({ hasSigned }: { hasSigned: boolean }) => {\n  const onboard = useOnboard()\n\n  const handleSwitchWallet = () => {\n    if (onboard) {\n      switchWallet(onboard)\n    }\n  }\n  if (!hasSigned) {\n    return null\n  }\n  return (\n    <SuccessMessage>\n      <Grid\n        container\n        direction=\"row\"\n        sx={{\n          justifyContent: 'space-between',\n        }}\n      >\n        <Grid item xs={7}>\n          Your connected wallet has already signed this message.\n        </Grid>\n        <Grid item xs={4}>\n          <Button variant=\"contained\" size=\"small\" onClick={handleSwitchWallet} fullWidth>\n            Switch wallet\n          </Button>\n        </Grid>\n      </Grid>\n    </SuccessMessage>\n  )\n}\n\nconst BlindSigningWarning = ({\n  isBlindSigningEnabled,\n  isBlindSigningPayload,\n}: {\n  isBlindSigningEnabled: boolean\n  isBlindSigningPayload: boolean\n}) => {\n  const router = useRouter()\n  const query = router.query.safe ? { safe: router.query.safe } : undefined\n\n  if (!isBlindSigningPayload) {\n    return null\n  }\n\n  return (\n    <ErrorMessage level={isBlindSigningEnabled ? 'warning' : 'error'}>\n      This request involves{' '}\n      <Link component={NextLink} href={{ pathname: AppRoutes.settings.security, query }}>\n        blind signing\n      </Link>\n      , which can lead to unpredictable outcomes.\n      <br />\n      {isBlindSigningEnabled ? (\n        'Proceed with caution.'\n      ) : (\n        <>\n          If you wish to proceed, you must first{' '}\n          <Link component={NextLink} href={{ pathname: AppRoutes.settings.security, query }}>\n            enable blind signing\n          </Link>\n          .\n        </>\n      )}\n    </ErrorMessage>\n  )\n}\n\nconst SuccessCard = ({ safeMessage, onContinue }: { safeMessage: SafeMessage; onContinue: () => void }) => {\n  return (\n    <TxCard>\n      <Typography\n        variant=\"h4\"\n        gutterBottom\n        sx={{\n          textAlign: 'center',\n        }}\n      >\n        Message successfully signed\n      </Typography>\n      <MsgSigners msg={safeMessage} showOnlyConfirmations showMissingSignatures />\n      <CardActions>\n        <Button variant=\"contained\" color=\"primary\" onClick={onContinue} disabled={!safeMessage.preparedSignature}>\n          Continue\n        </Button>\n      </CardActions>\n    </TxCard>\n  )\n}\n\ntype BaseProps = Pick<SafeMessage, 'logoUri' | 'name' | 'message'>\n\nexport type SignMessageProps = BaseProps & {\n  origin?: string\n  requestId?: RequestId\n}\n\nconst SignMessage = ({ message, origin, requestId }: SignMessageProps): ReactElement => {\n  // Hooks & variables\n  const { setTxFlow } = useContext(TxModalContext)\n  const { setSafeMessage: setContextSafeMessage } = useContext(SafeTxContext)\n  const { needsRiskConfirmation, isRiskConfirmed, setIsRiskIgnored } = useContext(TxSecurityContext)\n  const { palette } = useTheme()\n  const { safe } = useSafeInfo()\n  const isOwner = useIsSafeOwner()\n  const wallet = useWallet()\n  useHighlightHiddenTab()\n\n  const { decodedMessage, safeMessageMessage, safeMessageHash } = useDecodedSafeMessage(message, safe)\n  const [safeMessage, setSafeMessage] = useSafeMessage(safeMessageHash)\n  const domainHash = getDomainHash({\n    chainId: safe.chainId,\n    safeAddress: safe.address.value,\n    safeVersion: safe.version as SafeVersion,\n  })\n  const messageHash = getSafeMessageMessageHash({ message: decodedMessage, safeVersion: safe.version as SafeVersion })\n  const isPlainTextMessage = typeof decodedMessage === 'string'\n  const decodedMessageAsString = isPlainTextMessage ? decodedMessage : JSON.stringify(decodedMessage, null, 2)\n  const signedByCurrentSafe = !!safeMessage?.confirmations.some(({ owner }) => owner.value === wallet?.address)\n  const hasSignature = safeMessage?.confirmations && safeMessage.confirmations.length > 0\n  const isFullySigned = !!safeMessage?.preparedSignature\n  const isEip712 = isEIP712TypedData(decodedMessage)\n  const isBlindSigningRequest = isBlindSigningPayload(decodedMessage)\n  const isBlindSigningEnabled = useAppSelector(selectBlindSigning)\n  const isDisabled =\n    !isOwner || signedByCurrentSafe || !safe.deployed || (!isBlindSigningEnabled && isBlindSigningRequest)\n\n  const { onSign, submitError } = useSyncSafeMessageSigner(\n    safeMessage,\n    decodedMessage,\n    safeMessageHash,\n    requestId,\n    origin,\n    () => setTxFlow(undefined),\n  )\n\n  const handleSign = async () => {\n    if (needsRiskConfirmation && !isRiskConfirmed) {\n      setIsRiskIgnored(true)\n      return\n    }\n\n    const updatedMessage = await onSign()\n\n    if (updatedMessage) {\n      setSafeMessage(updatedMessage)\n    }\n\n    // Track first signature as creation\n    const isCreation = updatedMessage?.confirmations.length === 1\n    trackEvent({ ...(isCreation ? TX_EVENTS.CREATE : TX_EVENTS.CONFIRM), label: TX_TYPES.typed_message })\n  }\n\n  const onContinue = async () => {\n    if (!safeMessage) {\n      return\n    }\n    await dispatchPreparedSignature(safeMessage, safeMessageHash, () => setTxFlow(undefined), requestId)\n  }\n\n  // Set message for redefine scan\n  useEffect(() => {\n    if (typeof message !== 'string') {\n      setContextSafeMessage(message)\n    }\n  }, [message, setContextSafeMessage])\n\n  return (\n    <>\n      <TxCard>\n        <CardContent>\n          <DialogHeader threshold={safe.threshold} />\n\n          {isEip712 && (\n            <ErrorBoundary fallback={<div>Error parsing data</div>}>\n              <ApprovalEditor safeMessage={decodedMessage} />\n            </ErrorBoundary>\n          )}\n\n          <BlindSigningWarning\n            isBlindSigningEnabled={isBlindSigningEnabled}\n            isBlindSigningPayload={isBlindSigningRequest}\n          />\n\n          <Typography\n            sx={{\n              fontWeight: 700,\n              mt: 2,\n              mb: 1,\n            }}\n          >\n            Message: <CopyButton text={decodedMessageAsString} />\n          </Typography>\n          <DecodedMsg message={decodedMessage} isInModal />\n\n          <Accordion sx={{ mt: 2 }}>\n            <AccordionSummary data-testid=\"message-details\" expandIcon={<ExpandMoreIcon />}>\n              SafeMessage details\n            </AccordionSummary>\n            <AccordionDetails>\n              <MessageHashField label=\"SafeMessage\" hashValue={safeMessageMessage} />\n              <MessageHashField label=\"SafeMessage hash\" hashValue={safeMessageHash} />\n              <MessageHashField label=\"Domain hash\" hashValue={domainHash} />\n              <MessageHashField label=\"Message hash\" hashValue={messageHash} />\n            </AccordionDetails>\n          </Accordion>\n\n          <Box sx={{ '&:not(:empty)': { mt: 2 } }}>\n            <Blockaid />\n          </Box>\n        </CardContent>\n      </TxCard>\n      {isFullySigned ? (\n        <SuccessCard onContinue={onContinue} safeMessage={safeMessage} />\n      ) : (\n        <>\n          <TxCard>\n            <AlreadySignedByOwnerMessage hasSigned={signedByCurrentSafe} />\n\n            <InfoBox\n              title=\"Collect all the confirmations\"\n              message={\n                requestId && !hasSignature\n                  ? 'Please keep this modal open until all signers confirm this message. Closing the modal will abort the signing request.'\n                  : 'The signature will be submitted to the requesting app when the message is fully signed.'\n              }\n            >\n              <MsgSigners\n                msg={safeMessage ?? createSkeletonMessage(safe.threshold)}\n                showOnlyConfirmations\n                showMissingSignatures\n                backgroundColor={palette.info.background}\n              />\n            </InfoBox>\n\n            {hasSignature && (\n              <InfoBox\n                title=\"Share the link with other owners\"\n                message={\n                  <>\n                    <Typography\n                      sx={{\n                        mb: 2,\n                      }}\n                    >\n                      The owners will receive a notification about signing the message. You can also share the link with\n                      them to speed up the process.\n                    </Typography>\n                    <MsgShareLink safeMessageHash={safeMessageHash} button />\n                  </>\n                }\n                icon={LinkIcon}\n              />\n            )}\n\n            <NetworkWarning />\n\n            <MessageDialogError isOwner={isOwner} submitError={submitError} />\n\n            <RiskConfirmationError />\n\n            {!safe.deployed && <ErrorMessage>Your Safe Account is not activated yet.</ErrorMessage>}\n          </TxCard>\n          <TxCard>\n            <CardActions>\n              <CheckWallet checkNetwork={!isDisabled}>\n                {(isOk) => (\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleSign} disabled={!isOk || isDisabled}>\n                    Sign\n                  </Button>\n                )}\n              </CheckWallet>\n            </CardActions>\n          </TxCard>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default SignMessage\n","import { id } from 'ethers'\nimport type { BaseTransaction } from '@safe-global/safe-apps-sdk'\n\nconst WITHDRAW_SIGHASH = id('requestValidatorsExit(bytes)').slice(0, 10)\nconst CLAIM_SIGHASH = id('batchWithdrawCLFee(bytes)').slice(0, 10)\n\nexport const getStakeTitle = (txs: BaseTransaction[] | undefined) => {\n  const hashToLabel = {\n    [WITHDRAW_SIGHASH]: 'Withdraw request',\n    [CLAIM_SIGHASH]: 'Claim',\n  }\n\n  const stakeTitle = txs\n    ?.map((tx) => hashToLabel[tx.data.slice(0, 10)])\n    .filter(Boolean)\n    .join(' and ')\n\n  return stakeTitle\n}\n","import TxLayout from '@/components/tx-flow/common/TxLayout'\nimport SignMessage, { type SignMessageProps } from '@/components/tx-flow/flows/SignMessage/SignMessage'\nimport { getSwapTitle } from '@/features/swap'\nimport { selectSwapParams } from '@/features/swap/store/swapParamsSlice'\nimport { useAppSelector } from '@/store'\nimport { Box, Typography } from '@mui/material'\nimport SafeAppIconCard from '@/components/safe-apps/SafeAppIconCard'\nimport { ErrorBoundary } from '@sentry/react'\nimport { type BaseTransaction } from '@safe-global/safe-apps-sdk'\nimport { SWAP_TITLE } from '@/features/swap/constants'\nimport { STAKE_TITLE } from '@/features/stake/constants'\nimport { getStakeTitle } from '@/features/stake/helpers/utils'\n\nconst APP_LOGO_FALLBACK_IMAGE = '/images/apps/apps-icon.svg'\nconst APP_NAME_FALLBACK = 'Sign message'\n\nexport const AppTitle = ({\n  name,\n  logoUri,\n  txs,\n}: {\n  name?: string | null\n  logoUri?: string | null\n  txs?: BaseTransaction[]\n}) => {\n  const swapParams = useAppSelector(selectSwapParams)\n\n  const appName = name || APP_NAME_FALLBACK\n  const appLogo = logoUri || APP_LOGO_FALLBACK_IMAGE\n\n  let title = appName\n  if (name === SWAP_TITLE) {\n    title = getSwapTitle(swapParams.tradeType, txs) || title\n  }\n\n  if (name === STAKE_TITLE) {\n    title = getStakeTitle(txs) || title\n  }\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <SafeAppIconCard src={appLogo} alt={name || 'The icon of the application'} width={32} height={32} />\n      <Typography variant=\"h4\" pl={2} fontWeight=\"bold\">\n        {title}\n      </Typography>\n    </Box>\n  )\n}\n\nconst SignMessageFlow = ({ ...props }: SignMessageProps) => {\n  return (\n    <TxLayout\n      title=\"Confirm message\"\n      subtitle={<AppTitle name={props.name} logoUri={props.logoUri} />}\n      step={0}\n      hideNonce\n      isMessage\n    >\n      <ErrorBoundary fallback={<div>Error signing message</div>}>\n        <SignMessage {...props} />\n      </ErrorBoundary>\n    </TxLayout>\n  )\n}\n\nexport default SignMessageFlow\n","import { isSafeMessageListItem } from '@/utils/safe-message-guards'\nimport { type SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useState, useEffect } from 'react'\nimport useSafeMessages from './useSafeMessages'\nimport useAsync from '../useAsync'\nimport useSafeInfo from '../useSafeInfo'\nimport { fetchSafeMessage } from './useSyncSafeMessageSigner'\n\nconst useSafeMessage = (safeMessageHash: string | undefined) => {\n  const [safeMessage, setSafeMessage] = useState<SafeMessage | undefined>()\n\n  const { safe } = useSafeInfo()\n\n  const messages = useSafeMessages()\n\n  const ongoingMessage = messages.page?.results\n    ?.filter(isSafeMessageListItem)\n    .find((msg) => msg.messageHash === safeMessageHash)\n\n  const [updatedMessage, messageError] = useAsync(async () => {\n    if (!safeMessageHash) return\n    return fetchSafeMessage(safeMessageHash, safe.chainId)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [safeMessageHash, safe.chainId, safe.messagesTag])\n\n  useEffect(() => {\n    setSafeMessage(updatedMessage ?? ongoingMessage)\n  }, [ongoingMessage, updatedMessage])\n\n  return [safeMessage, setSafeMessage, messageError] as const\n}\n\nexport default useSafeMessage\n","import { proposeSafeMessage, confirmSafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { SafeInfo, SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { Eip1193Provider } from 'ethers'\n\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\nimport { generateSafeMessageHash, isEIP712TypedData, tryOffChainMsgSigning } from '@/utils/safe-messages'\nimport { normalizeTypedData } from '@/utils/web3'\nimport { getAssertedChainSigner } from '@/services/tx/tx-sender/sdk'\nimport { asError } from '../exceptions/utils'\n\nexport const dispatchSafeMsgProposal = async ({\n  provider,\n  safe,\n  message,\n  origin = '',\n}: {\n  provider: Eip1193Provider\n  safe: SafeInfo\n  message: SafeMessage['message']\n  origin: string | undefined\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(provider)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    let normalizedMessage = message\n    if (isEIP712TypedData(message)) {\n      normalizedMessage = normalizeTypedData(message)\n    }\n\n    await proposeSafeMessage(safe.chainId, safe.address.value, {\n      message: normalizedMessage,\n      signature,\n      origin,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.PROPOSE, {\n    messageHash,\n  })\n}\n\nexport const dispatchSafeMsgConfirmation = async ({\n  provider,\n  safe,\n  message,\n}: {\n  provider: Eip1193Provider\n  safe: SafeInfo\n  message: SafeMessage['message']\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(provider)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    await confirmSafeMessage(safe.chainId, messageHash, {\n      signature,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE, {\n    messageHash,\n  })\n}\n","import useWallet from '@/hooks/wallets/useWallet'\nimport { Errors, logError } from '@/services/exceptions'\nimport { asError } from '@/services/exceptions/utils'\nimport { dispatchPreparedSignature } from '@/services/safe-messages/safeMsgNotifications'\nimport { dispatchSafeMsgProposal, dispatchSafeMsgConfirmation } from '@/services/safe-messages/safeMsgSender'\nimport {\n  getSafeMessage,\n  SafeMessageListItemType,\n  type EIP712TypedData,\n  type SafeMessage,\n} from '@safe-global/safe-gateway-typescript-sdk'\nimport { useEffect, useCallback, useState } from 'react'\nimport useSafeInfo from '../useSafeInfo'\n\nconst HIDE_DELAY = 3000\n\nexport const fetchSafeMessage = async (safeMessageHash: string, chainId: string) => {\n  let message: SafeMessage | undefined\n  try {\n    // fetchedMessage does not have a type because it is explicitly a message\n    const fetchedMessage = await getSafeMessage(chainId, safeMessageHash)\n    message = { ...fetchedMessage, type: SafeMessageListItemType.MESSAGE }\n  } catch (err) {\n    logError(Errors._613, err)\n    throw err\n  }\n\n  return message\n}\n\nconst useSyncSafeMessageSigner = (\n  message: SafeMessage | undefined,\n  decodedMessage: string | EIP712TypedData,\n  safeMessageHash: string,\n  requestId: string | undefined,\n  origin: string | undefined,\n  onClose: () => void,\n) => {\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n\n  // If the message gets updated in the messageSlice we dispatch it if the signature is complete\n  useEffect(() => {\n    let timeout: NodeJS.Timeout | undefined\n    if (message?.preparedSignature) {\n      timeout = setTimeout(() => dispatchPreparedSignature(message, safeMessageHash, onClose, requestId), HIDE_DELAY)\n    }\n    return () => clearTimeout(timeout)\n  }, [message, safe.chainId, safeMessageHash, onClose, requestId])\n\n  const onSign = useCallback(async () => {\n    // Error is shown when no wallet is connected, this appeases TypeScript\n    if (!wallet) {\n      return\n    }\n\n    setSubmitError(undefined)\n\n    try {\n      // When collecting the first signature\n      if (!message) {\n        await dispatchSafeMsgProposal({ provider: wallet.provider, safe, message: decodedMessage, origin })\n\n        // Fetch updated message\n        const updatedMsg = await fetchSafeMessage(safeMessageHash, safe.chainId)\n\n        // If threshold 1, we do not want to wait for polling\n        if (safe.threshold === 1) {\n          setTimeout(() => dispatchPreparedSignature(updatedMsg, safeMessageHash, onClose, requestId), HIDE_DELAY)\n        }\n        return updatedMsg\n      } else {\n        await dispatchSafeMsgConfirmation({ provider: wallet.provider, safe, message: decodedMessage })\n\n        // No requestID => we are in the confirm message dialog and do not need to leave the window open\n        if (!requestId) {\n          onClose()\n          return\n        }\n\n        const updatedMsg = await fetchSafeMessage(safeMessageHash, safe.chainId)\n        setTimeout(() => dispatchPreparedSignature(updatedMsg, safeMessageHash, onClose, requestId), HIDE_DELAY)\n        return updatedMsg\n      }\n    } catch (e) {\n      setSubmitError(asError(e))\n    }\n  }, [wallet, safe, message, decodedMessage, origin, safeMessageHash, onClose, requestId])\n\n  return { submitError, onSign }\n}\n\nexport default useSyncSafeMessageSigner\n","import { useEffect } from 'react'\n\nconst ALT_FAVICON = '/favicons/favicon-dot.ico'\nconst TITLE_PREFIX = '‼️ '\n\nconst setFavicon = (favicon: HTMLLinkElement | null, href: string) => {\n  if (favicon) favicon.href = href\n}\n\nconst setDocumentTitle = (isPrefixed: boolean) => {\n  document.title = isPrefixed ? TITLE_PREFIX + document.title : document.title.replace(TITLE_PREFIX, '')\n}\n\nconst blinkFavicon = (\n  favicon: HTMLLinkElement | null,\n  originalHref: string,\n  isBlinking = false,\n): ReturnType<typeof setInterval> => {\n  const onBlink = () => {\n    setDocumentTitle(isBlinking)\n    setFavicon(favicon, isBlinking ? ALT_FAVICON : originalHref)\n    isBlinking = !isBlinking\n  }\n\n  onBlink()\n\n  return setInterval(onBlink, 300)\n}\n\n/**\n * Blink favicon when the tab is hidden\n */\nconst useHighlightHiddenTab = () => {\n  useEffect(() => {\n    const favicon = document.querySelector<HTMLLinkElement>('link[rel*=\"icon\"]')\n    const originalHref = favicon?.href || ''\n    let interval: ReturnType<typeof setInterval>\n\n    const reset = () => {\n      clearInterval(interval)\n      setFavicon(favicon, originalHref)\n      setDocumentTitle(false)\n    }\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        interval = blinkFavicon(favicon, originalHref)\n      } else {\n        reset()\n      }\n    }\n\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n\n    handleVisibilityChange()\n\n    return () => {\n      reset()\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    }\n  }, [])\n}\n\nexport default useHighlightHiddenTab\n","import type { SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\n\nconst isMessageFullySigned = (message: SafeMessage): message is SafeMessage & { preparedSignature: string } => {\n  return message.confirmationsSubmitted >= message.confirmationsRequired && !!message.preparedSignature\n}\n\n/**\n * Dispatches a notification including the `preparedSignature` of the message if it is fully signed.\n *\n * @param chainId\n * @param safeMessageHash\n * @param onClose\n * @param requestId\n */\nexport const dispatchPreparedSignature = async (\n  message: SafeMessage,\n  safeMessageHash: string,\n  onClose: () => void,\n  requestId?: string,\n) => {\n  if (isMessageFullySigned(message)) {\n    safeMsgDispatch(SafeMsgEvent.SIGNATURE_PREPARED, {\n      messageHash: safeMessageHash,\n      requestId,\n      signature: message.preparedSignature,\n    })\n    onClose()\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sAIKm\",\"message\":\"styles_message__G1Adl\",\"details\":\"styles_details__m9_zQ\",\"divider\":\"styles_divider__hXKbs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sq4dv\",\"message\":\"styles_message__X3rNR\",\"details\":\"styles_details___XV55\"};"],"names":["message","safe","decodedMessage","useMemo","getDecodedMessage","useDecodedSafeMessage","safeMessageMessage","generateSafeMessageMessage","safeMessageHash","generateSafeMessageHash","children","SuccessMessage","className","div","classNames","css","SvgIcon","component","CheckIcon","color","inheritViewBox","fontSize","Typography","variant","width","title","InfoBox","icon","InfoIcon","data-testid","fontWeight","Divider","isRiskConfirmed","isRiskIgnored","RiskConfirmationError","useContext","TxSecurityContext","ErrorMessage","level","createSkeletonMessage","confirmations","confirmationsRequired","confirmationsSubmitted","creationTimestamp","logoUri","messageHash","modifiedTimestamp","name","proposedBy","value","status","SafeMessageStatus","NEEDS_CONFIRMATION","type","SafeMessageListItemType","MESSAGE","MessageHashField","label","hashValue","sx","mt","EthHashInfo","address","showAvatar","shortAddress","showCopyButton","DialogHeader","threshold","Box","textAlign","mb","RequiredIcon","viewBox","gutterBottom","b","MessageDialogError","isOwner","submitError","wallet","useWallet","onboard","useOnboard","errorMessage","isWalletRejection","AlreadySignedByOwnerMessage","hasSigned","Grid","container","direction","justifyContent","item","xs","Button","size","onClick","handleSwitchWallet","switchWallet","fullWidth","BlindSigningWarning","isBlindSigningEnabled","isBlindSigningPayload","router","useRouter","query","undefined","Link","NextLink","href","pathname","AppRoutes","settings","security","br","SuccessCard","safeMessage","onContinue","TxCard","MsgSigners","msg","showOnlyConfirmations","showMissingSignatures","CardActions","disabled","preparedSignature","origin","SignMessage","requestId","setTxFlow","TxModalContext","setSafeMessage","setContextSafeMessage","SafeTxContext","needsRiskConfirmation","setIsRiskIgnored","palette","useTheme","useSafeInfo","useIsSafeOwner","useHighlightHiddenTab","useSafeMessage","domainHash","getDomainHash","chainId","safeAddress","safeVersion","version","getSafeMessageMessageHash","decodedMessageAsString","JSON","stringify","signedByCurrentSafe","some","owner","hasSignature","length","isFullySigned","isEip712","isEIP712TypedData","isBlindSigningRequest","useAppSelector","selectBlindSigning","isDisabled","deployed","onSign","useSyncSafeMessageSigner","handleSign","updatedMessage","isCreation","trackEvent","TX_EVENTS","CREATE","CONFIRM","TX_TYPES","typed_message","dispatchPreparedSignature","useEffect","CardContent","ErrorBoundary","fallback","ApprovalEditor","CopyButton","text","DecodedMsg","isInModal","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","Blockaid","backgroundColor","info","background","MsgShareLink","button","LinkIcon","NetworkWarning","CheckWallet","checkNetwork","isOk","WITHDRAW_SIGHASH","id","slice","CLAIM_SIGHASH","getStakeTitle","hashToLabel","stakeTitle","txs","map","tx","data","filter","Boolean","join","AppTitle","swapParams","selectSwapParams","appName","APP_NAME_FALLBACK","SWAP_TITLE","getSwapTitle","tradeType","STAKE_TITLE","display","alignItems","SafeAppIconCard","src","appLogo","APP_LOGO_FALLBACK_IMAGE","alt","height","pl","props","SignMessageFlow","TxLayout","subtitle","step","hideNonce","isMessage","messages","useState","ongoingMessage","useSafeMessages","page","results","isSafeMessageListItem","find","messageError","useAsync","fetchSafeMessage","messagesTag","dispatchSafeMsgProposal","provider","signer","getAssertedChainSigner","signature","tryOffChainMsgSigning","normalizedMessage","normalizeTypedData","proposeSafeMessage","error","safeMsgDispatch","SafeMsgEvent","PROPOSE_FAILED","asError","PROPOSE","confirmSafeMessage","CONFIRM_PROPOSE_FAILED","CONFIRM_PROPOSE","getSafeMessage","fetchedMessage","err","logError","Errors","_613","onClose","setSubmitError","timeout","setTimeout","HIDE_DELAY","clearTimeout","useCallback","dispatchSafeMsgConfirmation","updatedMsg","e","TITLE_PREFIX","setFavicon","favicon","setDocumentTitle","document","isPrefixed","replace","blinkFavicon","originalHref","isBlinking","onBlink","ALT_FAVICON","setInterval","interval","querySelector","reset","clearInterval","handleVisibilityChange","hidden","addEventListener","removeEventListener","isMessageFullySigned","SIGNATURE_PREPARED"],"sourceRoot":"","ignoreList":[]}