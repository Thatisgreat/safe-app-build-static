{"version":3,"file":"static/chunks/6042.1a2560bc6edf2855.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/AddressBookInput/index.tsx","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/NftTransfer/SendNftBatch.tsx","webpack://_N_E/./src/components/tx-flow/flows/NftTransfer/ReviewNftBatch.tsx","webpack://_N_E/./src/components/tx-flow/flows/NftTransfer/index.tsx","webpack://_N_E/./src/components/tx-flow/useTxStepper.tsx","webpack://_N_E/./src/services/tx/tokenTransferParams.ts","webpack://_N_E/./src/components/common/AddressBookInput/styles.module.css","webpack://_N_E/./public/images/common/nft.svg"],"sourcesContent":["import { type ReactElement, useState, useMemo } from 'react'\nimport { Controller, useFormContext, useWatch } from 'react-hook-form'\nimport { SvgIcon, Typography } from '@mui/material'\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete'\nimport useAddressBook from '@/hooks/useAddressBook'\nimport AddressInput, { type AddressInputProps } from '../AddressInput'\nimport EthHashInfo from '../EthHashInfo'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport EntryDialog from '@/components/address-book/EntryDialog'\nimport css from './styles.module.css'\nimport inputCss from '@/styles/inputs.module.css'\nimport { isValidAddress } from '@/utils/validation'\nimport { sameAddress } from '@/utils/addresses'\n\nconst abFilterOptions = createFilterOptions({\n  stringify: (option: { label: string; name: string }) => option.name + ' ' + option.label,\n})\n\n/**\n *  Temporary component until revamped safe components are done\n */\nconst AddressBookInput = ({ name, canAdd, ...props }: AddressInputProps & { canAdd?: boolean }): ReactElement => {\n  const addressBook = useAddressBook()\n  const { setValue, control } = useFormContext()\n  const addressValue = useWatch({ name, control })\n  const [open, setOpen] = useState(false)\n  const [openAddressBook, setOpenAddressBook] = useState<boolean>(false)\n\n  const addressBookEntries = Object.entries(addressBook).map(([address, name]) => ({\n    label: address,\n    name,\n  }))\n\n  const hasVisibleOptions = useMemo(\n    () => !!addressBookEntries.filter((entry) => entry.label.includes(addressValue)).length,\n    [addressBookEntries, addressValue],\n  )\n\n  const isInAddressBook = useMemo(\n    () => addressBookEntries.some((entry) => sameAddress(entry.label, addressValue)),\n    [addressBookEntries, addressValue],\n  )\n\n  const customFilterOptions = (options: any, state: any) => {\n    // Don't show suggestions from the address book once a valid address has been entered.\n    if (isValidAddress(addressValue)) return []\n    return abFilterOptions(options, state)\n  }\n\n  const handleOpenAutocomplete = () => {\n    setOpen((value) => !value)\n  }\n\n  const onAddressBookClick = canAdd\n    ? () => {\n        setOpenAddressBook(true)\n      }\n    : undefined\n\n  return (\n    <>\n      <Controller\n        name={name}\n        control={control}\n        // eslint-disable-next-line\n        render={({ field: { ref, ...field } }) => (\n          <Autocomplete\n            {...field}\n            className={inputCss.input}\n            disableClearable\n            disabled={props.disabled}\n            readOnly={props.InputProps?.readOnly}\n            freeSolo\n            options={addressBookEntries}\n            onChange={(_, value) => (typeof value === 'string' ? field.onChange(value) : field.onChange(value.label))}\n            onInputChange={(_, value) => setValue(name, value)}\n            filterOptions={customFilterOptions}\n            componentsProps={{\n              paper: {\n                elevation: 2,\n              },\n            }}\n            renderOption={(props, option) => {\n              const { key, ...rest } = props\n              return (\n                <Typography data-testid=\"address-item\" component=\"li\" variant=\"body2\" {...rest} key={key}>\n                  <EthHashInfo address={option.label} name={option.name} shortAddress={false} copyAddress={false} />\n                </Typography>\n              )\n            }}\n            renderInput={(params) => (\n              <AddressInput\n                data-testid=\"address-item\"\n                {...params}\n                {...props}\n                focused={props.focused || !addressValue}\n                name={name}\n                onOpenListClick={hasVisibleOptions ? handleOpenAutocomplete : undefined}\n                isAutocompleteOpen={open}\n                onAddressBookClick={canAdd && !isInAddressBook ? onAddressBookClick : undefined}\n              />\n            )}\n          />\n        )}\n      />\n\n      {canAdd && !isInAddressBook ? (\n        <Typography variant=\"body2\" className={css.unknownAddress}>\n          <SvgIcon component={InfoIcon} fontSize=\"small\" />\n          <span>\n            This is an unknown address. You can{' '}\n            <a role=\"button\" onClick={onAddressBookClick}>\n              add it to your address book\n            </a>\n            .\n          </span>\n        </Typography>\n      ) : null}\n\n      {openAddressBook && (\n        <EntryDialog\n          handleClose={() => setOpenAddressBook(false)}\n          defaultValues={{ name: '', address: addressValue }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default AddressBookInput\n","export * from \"/Users/liuxiaolin/Documents/other/safe-wallet-monorepo/apps/web/src/components/common/Mui/index.tsx\"","import { Box, Button, CardActions, Divider, FormControl, Grid, SvgIcon, Typography } from '@mui/material'\nimport { type SafeCollectibleResponse } from '@safe-global/safe-gateway-typescript-sdk'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport NftIcon from '@/public/images/common/nft.svg'\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport type { NftTransferParams } from '.'\nimport ImageFallback from '@/components/common/ImageFallback'\nimport TxCard from '../../common/TxCard'\nimport commonCss from '@/components/tx-flow/common/styles.module.css'\n\nenum Field {\n  recipient = 'recipient',\n}\n\ntype FormData = Pick<NftTransferParams, Field.recipient>\n\ntype SendNftBatchProps = {\n  onSubmit: (data: NftTransferParams) => void\n  params: NftTransferParams\n}\n\nconst NftItem = ({ image, name, description }: { image: string; name: string; description?: string }) => (\n  <Grid\n    container\n    wrap=\"nowrap\"\n    sx={{\n      gap: 2,\n      alignItems: 'center',\n    }}\n  >\n    <Grid item>\n      <Box\n        sx={{\n          width: 40,\n          height: 40,\n        }}\n      >\n        <ImageFallback\n          src={image}\n          fallbackSrc=\"\"\n          fallbackComponent={<SvgIcon component={NftIcon} inheritViewBox sx={{ width: 1, height: 1 }} />}\n          alt={name}\n          height={40}\n        />\n      </Box>\n    </Grid>\n\n    <Grid\n      item\n      sx={{\n        overflow: 'hidden',\n      }}\n    >\n      <Typography\n        data-testid=\"nft-item-name\"\n        variant=\"body2\"\n        sx={{\n          fontWeight: 700,\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n        }}\n      >\n        {name}\n      </Typography>\n\n      {description && (\n        <Typography\n          variant=\"body2\"\n          sx={{\n            color: 'text.secondary',\n            whiteSpace: 'nowrap',\n            display: 'block',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {description}\n        </Typography>\n      )}\n    </Grid>\n  </Grid>\n)\n\nexport const NftItems = ({ tokens }: { tokens: SafeCollectibleResponse[] }) => {\n  return (\n    <Box\n      data-testid=\"nft-item-list\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 2,\n        overflow: 'auto',\n        maxHeight: '20vh',\n        minHeight: '40px',\n      }}\n    >\n      {tokens.map((token) => (\n        <NftItem\n          key={`${token.address}-${token.id}`}\n          image={token.imageUri || token.logoUri}\n          name={`${token.tokenName || token.tokenSymbol || ''} #${token.id}`}\n          description={`Token ID: ${token.id}${token.name ? ` - ${token.name}` : ''}`}\n        />\n      ))}\n    </Box>\n  )\n}\n\nconst SendNftBatch = ({ params, onSubmit }: SendNftBatchProps) => {\n  const { tokens } = params\n\n  const formMethods = useForm<FormData>({\n    defaultValues: {\n      [Field.recipient]: params.recipient,\n    },\n  })\n  const {\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = formMethods\n\n  const recipient = watch(Field.recipient)\n  const isAddressValid = !!recipient && !errors[Field.recipient]\n\n  const onFormSubmit = (data: FormData) => {\n    onSubmit({\n      recipient: data.recipient,\n      tokens,\n    })\n  }\n\n  return (\n    <TxCard>\n      <FormProvider {...formMethods}>\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <FormControl fullWidth sx={{ mb: 3, mt: 1 }}>\n            <AddressBookInput name={Field.recipient} canAdd={isAddressValid} />\n          </FormControl>\n\n          <Typography\n            data-testid=\"selected-nfts\"\n            variant=\"body2\"\n            sx={{\n              color: 'text.secondary',\n              mb: 2,\n            }}\n          >\n            Selected NFTs\n          </Typography>\n\n          <NftItems tokens={tokens} />\n\n          <Divider className={commonCss.nestedDivider} sx={{ pt: 3 }} />\n\n          <CardActions>\n            <Button variant=\"contained\" type=\"submit\">\n              Next\n            </Button>\n          </CardActions>\n        </form>\n      </FormProvider>\n    </TxCard>\n  )\n}\n\nexport default SendNftBatch\n","import { type ReactElement, useEffect, useContext } from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport SendToBlock from '@/components/tx/SendToBlock'\nimport { createNftTransferParams } from '@/services/tx/tokenTransferParams'\nimport type { NftTransferParams } from '.'\nimport useSafeAddress from '@/hooks/useSafeAddress'\nimport { createMultiSendCallOnlyTx, createTx } from '@/services/tx/tx-sender'\nimport SignOrExecuteForm from '@/components/tx/SignOrExecuteForm'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport { NftItems } from '@/components/tx-flow/flows/NftTransfer/SendNftBatch'\n\ntype ReviewNftBatchProps = {\n  params: NftTransferParams\n  onSubmit: () => void\n  txNonce?: number\n}\n\nconst ReviewNftBatch = ({ params, onSubmit, txNonce }: ReviewNftBatchProps): ReactElement => {\n  const { setSafeTx, setSafeTxError, setNonce } = useContext(SafeTxContext)\n  const safeAddress = useSafeAddress()\n  const { tokens } = params\n\n  useEffect(() => {\n    if (txNonce !== undefined) {\n      setNonce(txNonce)\n    }\n  }, [txNonce, setNonce])\n\n  useEffect(() => {\n    if (!safeAddress) return\n\n    const calls = params.tokens.map((token) => {\n      return createNftTransferParams(safeAddress, params.recipient, token.id, token.address)\n    })\n\n    const promise = calls.length > 1 ? createMultiSendCallOnlyTx(calls) : createTx(calls[0])\n\n    promise.then(setSafeTx).catch(setSafeTxError)\n  }, [safeAddress, params, setSafeTx, setSafeTxError])\n\n  return (\n    <SignOrExecuteForm onSubmit={onSubmit}>\n      <Grid\n        container\n        sx={{\n          gap: 1,\n          mb: 2,\n        }}\n      >\n        <Grid item md>\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: 'text.secondary',\n            }}\n          >\n            Send\n          </Typography>\n        </Grid>\n\n        <Grid item xs md={10}>\n          <NftItems tokens={tokens} />\n        </Grid>\n      </Grid>\n      <SendToBlock address={params.recipient} />\n    </SignOrExecuteForm>\n  )\n}\n\nexport default ReviewNftBatch\n","import type { SafeCollectibleResponse } from '@safe-global/safe-gateway-typescript-sdk'\nimport NftIcon from '@/public/images/common/nft.svg'\nimport TxLayout from '@/components/tx-flow/common/TxLayout'\nimport useTxStepper from '../../useTxStepper'\nimport SendNftBatch from './SendNftBatch'\nimport ReviewNftBatch from './ReviewNftBatch'\n\nexport type NftTransferParams = {\n  recipient: string\n  tokens: SafeCollectibleResponse[]\n}\n\ntype NftTransferFlowProps = Partial<NftTransferParams> & {\n  txNonce?: number\n}\n\nconst defaultParams: NftTransferParams = {\n  recipient: '',\n  tokens: [],\n}\n\nconst NftTransferFlow = ({ txNonce, ...params }: NftTransferFlowProps) => {\n  const { data, step, nextStep, prevStep } = useTxStepper<NftTransferParams>({\n    ...defaultParams,\n    ...params,\n  })\n\n  const steps = [\n    <SendNftBatch key={0} params={data} onSubmit={(formData) => nextStep({ ...data, ...formData })} />,\n\n    <ReviewNftBatch key={1} params={data} txNonce={txNonce} onSubmit={() => null} />,\n  ]\n\n  return (\n    <TxLayout\n      title={step === 0 ? 'New transaction' : 'Confirm transaction'}\n      subtitle=\"Send NFTs\"\n      icon={NftIcon}\n      step={step}\n      onBack={prevStep}\n    >\n      {steps}\n    </TxLayout>\n  )\n}\n\nexport default NftTransferFlow\n","import { MODAL_NAVIGATION, trackEvent } from '@/services/analytics'\nimport { useCallback, useState } from 'react'\n\nconst useTxStepper = <T extends unknown>(initialData: T, eventCategory?: string) => {\n  const [step, setStep] = useState(0)\n  const [data, setData] = useState<T>(initialData)\n\n  const nextStep = useCallback(\n    (entireData: T) => {\n      setData(entireData)\n      setStep((prevStep) => {\n        if (eventCategory) {\n          trackEvent({ action: MODAL_NAVIGATION.Next, category: eventCategory, label: prevStep })\n        }\n\n        return prevStep + 1\n      })\n    },\n    [eventCategory],\n  )\n\n  const prevStep = useCallback(() => {\n    setStep((prevStep) => {\n      if (eventCategory) {\n        trackEvent({ action: MODAL_NAVIGATION.Back, category: eventCategory, label: prevStep })\n      }\n      return prevStep - 1\n    })\n  }, [eventCategory])\n\n  return { step, data, nextStep, prevStep }\n}\n\nexport default useTxStepper\n","import type { MetaTransactionData } from '@safe-global/safe-core-sdk-types'\nimport { ConfirmationViewTypes, type BaselineConfirmationView } from '@safe-global/safe-gateway-typescript-sdk'\nimport { safeParseUnits } from '@/utils/formatters'\nimport { Interface } from 'ethers'\nimport { sameAddress } from '@/utils/addresses'\n\n// CryptoKitties Contract Addresses by network\n// This is an exception made for a popular NFT that's not ERC721 standard-compatible,\n// so we can allow the user to transfer the assets by using `transfer` instead of\n// the standard `safeTransferFrom` method.\nconst CryptoKittiesContract = '0x06012c8cf97bead5deae237070f9587f8e7a266d'\n\nconst encodeERC20TransferData = (to: string, value: string): string => {\n  const erc20Abi = ['function transfer(address to, uint256 value)']\n  const contractInterface = new Interface(erc20Abi)\n  return contractInterface.encodeFunctionData('transfer', [to, value])\n}\n\nconst encodeERC721TransferData = (from: string, to: string, tokenId: string): string => {\n  const erc721Abi = ['function safeTransferFrom(address from, address to, uint256 tokenId)']\n  const contractInterface = new Interface(erc721Abi)\n  return contractInterface.encodeFunctionData('safeTransferFrom', [from, to, tokenId])\n}\n\nexport const createTokenTransferParams = (\n  recipient: string,\n  amount: string,\n  decimals: number | null | undefined,\n  tokenAddress: string,\n): MetaTransactionData => {\n  const isNativeToken = parseInt(tokenAddress, 16) === 0\n  const value = safeParseUnits(amount, decimals)?.toString() || '0'\n\n  return isNativeToken\n    ? {\n        to: recipient,\n        value,\n        data: '0x',\n      }\n    : {\n        to: tokenAddress,\n        value: '0',\n        data: encodeERC20TransferData(recipient, value),\n      }\n}\n\nexport const createNftTransferParams = (\n  from: string,\n  to: string,\n  tokenId: string,\n  tokenAddress: string,\n): MetaTransactionData => {\n  let data = encodeERC721TransferData(from, to, tokenId)\n\n  // An exception made for CryptoKitties, which is not ERC721 standard-compatible\n  if (sameAddress(tokenAddress, CryptoKittiesContract)) {\n    data = encodeERC20TransferData(to, tokenId)\n  }\n\n  return {\n    to: tokenAddress,\n    value: '0',\n    data,\n  }\n}\n\nexport const getNativeTransferData = ({\n  to,\n  value,\n}: Pick<MetaTransactionData, 'to' | 'value'>): BaselineConfirmationView => {\n  return {\n    type: ConfirmationViewTypes.GENERIC,\n    method: '',\n    parameters: [\n      {\n        name: 'to',\n        type: 'address',\n        value: to,\n      },\n      {\n        name: 'value',\n        type: 'uint256',\n        value,\n      },\n    ],\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"unknownAddress\":\"styles_unknownAddress__BH1i2\"};","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nvar SvgNft = function SvgNft(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 64,\n    height: 64,\n    viewBox: \"0 0 64 64\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.9688 20.9422H8.87817V25.5644H54.9688V20.9422Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.4301 23.84L55.8541 23.3991C55.2354 22.9262 55.111 22.0444 55.5768 21.4222L56.0141 20.8356C56.7252 19.9004 56.4123 18.752 55.5946 17.7884L49.6355 9.44356C48.7395 8.18844 47.2923 7.44178 45.7492 7.44178H18.2328C16.6897 7.44178 15.2426 8.18844 14.3466 9.44356L8.40167 17.7884C7.58389 18.752 7.27456 19.8969 7.98212 20.8356L8.41945 21.4222C8.88167 22.048 8.76078 22.9262 8.14212 23.3991L7.56612 23.84C6.63101 24.5511 6.44612 25.8844 7.15723 26.8196L28.0994 55.9787C28.4123 56.3876 28.8959 56.6293 29.4115 56.6293H34.5777C35.0932 56.6293 35.5768 56.3876 35.8897 55.9787L56.8426 26.8196C57.5537 25.8844 57.3688 24.5476 56.4337 23.84H56.4301ZM32.4657 52.3982C32.2274 52.7111 31.7581 52.7111 31.5199 52.3982L10.5706 23.6729C10.3323 23.36 10.4106 22.9049 10.6417 22.5956L17.2657 13.312C17.8239 12.5262 18.727 12.064 19.6906 12.064H44.2915C45.255 12.064 46.1581 12.5298 46.7163 13.312L53.351 22.5956C53.5857 22.9049 53.6603 23.3636 53.4221 23.6729L32.4621 52.3982H32.4657Z\",\n    fill: \"currentColor\"\n  })));\n};\nexport default SvgNft;"],"names":["abFilterOptions","createFilterOptions","stringify","option","name","label","canAdd","props","AddressBookInput","addressBook","useAddressBook","setValue","control","useFormContext","addressValue","useWatch","open","setOpen","useState","openAddressBook","setOpenAddressBook","addressBookEntries","Object","entries","map","address","hasVisibleOptions","useMemo","filter","entry","includes","length","isInAddressBook","some","sameAddress","customFilterOptions","options","state","isValidAddress","handleOpenAutocomplete","value","onAddressBookClick","undefined","Controller","render","field","ref","Autocomplete","className","inputCss","disabled","readOnly","InputProps","freeSolo","onChange","_","onInputChange","filterOptions","componentsProps","paper","elevation","renderOption","key","rest","Typography","data-testid","component","variant","EthHashInfo","shortAddress","copyAddress","renderInput","AddressInput","params","focused","onOpenListClick","isAutocompleteOpen","css","SvgIcon","InfoIcon","fontSize","span","a","role","onClick","EntryDialog","handleClose","defaultValues","Field","NftItem","image","description","Grid","container","wrap","sx","gap","alignItems","item","Box","width","height","ImageFallback","src","fallbackSrc","fallbackComponent","NftIcon","inheritViewBox","alt","overflow","fontWeight","whiteSpace","textOverflow","color","display","NftItems","tokens","flexDirection","maxHeight","minHeight","token","imageUri","logoUri","tokenName","tokenSymbol","id","onSubmit","SendNftBatch","formMethods","useForm","handleSubmit","watch","formState","errors","isAddressValid","TxCard","FormProvider","form","recipient","onFormSubmit","data","FormControl","fullWidth","mb","mt","Divider","commonCss","pt","CardActions","Button","type","ReviewNftBatch","txNonce","setSafeTx","setSafeTxError","setNonce","useContext","SafeTxContext","safeAddress","useSafeAddress","useEffect","calls","createNftTransferParams","promise","createMultiSendCallOnlyTx","createTx","then","catch","SignOrExecuteForm","md","xs","SendToBlock","defaultParams","NftTransferFlow","step","nextStep","prevStep","useTxStepper","steps","formData","TxLayout","title","subtitle","icon","onBack","initialData","eventCategory","setStep","setData","useCallback","entireData","trackEvent","action","MODAL_NAVIGATION","Next","category","Back","encodeERC20TransferData","to","Interface","erc20Abi","encodeFunctionData","encodeERC721TransferData","from","tokenId","erc721Abi","createTokenTransferParams","amount","decimals","tokenAddress","safeParseUnits","isNativeToken","parseInt","toString","CryptoKittiesContract"],"sourceRoot":"","ignoreList":[]}